SECCIÓN AVANZADA
-------------------

1. FILTER Y BACKDROP-FILTER
--------------------------------

Es la sección avanzada del curso. Vamos a ver TODO sobre funciones.

Hemos visto durante el curso algunas funciones como en las animaciones con la función de scroll(), o view() o el valor de background-image: url().

Ejemplo:
url("sergioada.png"): esta función tiene que buscar la url y poner la foto como valor.

Tambien teníamos la función dropshadow(), minmax() que utilizabamos en grid àra definir minimos y máximos....

Las funciones de filtro usamos con la propiedad filter. Nosotros la que hemos visto es filter: drop-shadow(o o 15px #fff) lo cual hacia que hubiera una sombra:

.box{
    background-color: #10232f;
    margin: auto;
    padding: 50px 50px;
    filter: drop-shadow(0 0 15px #000);
}

Hay más propiedades de filter. Lo que hacen es aplicar efectos especiales sombras, desenfoques, aumentan el contraste. ..

blur() es un efecto de desenfoque: filter: blur(3px); Hace que se desenfoque bastante el elemento sobre el que aplicamos esta función. Se aplica a la caja y a todos sus elementos hijos. Se le da con rems o pixeles.

Un efecto común con blur() es aplicarlo al fondo cuando abrimos una ventana modal de las que ya vimos y superponemos la ventana modal.

Después tenemos la función brightness filter: brightness(2); Si le damos valores mayores que 1 entonces la imagen o el elemento se hace más clarito, mientras que si le damos valores menores que 1 se hacen más oscuros. Esto es más para personas que se dedican a diseño de imagen. Pero es bueno saberlo.

Más tarde tenemos el contraste: filter: contrast(); Si ponemos 0, la imagen va a ser gris; si ponemos 1 tendrá un contraste normal. Funciona mejor con imágenes que con elementos. Los claros hacen que sean más claros, y los oscuros más oscuros.

También tenemos la función greyscale o escala de grises: filter: grayscale(); Si le damos 1 se pone gris. Si 0, entoncesla deja normal.

Por otra parte tenemos satúrate() que es la saturación de la imagen o del elemento. Esto sobre todo se ve con imágenes. Si ponemos 1 se ve bien, normal. 

Después tenemos hue-rotate(). Funciona internamente cuando le pasamos un valor en grados (deg (degrees)). Cambia la escala de colores simplemente en función del valor que le demos. No se cuando utilizar este tipo de funciones, si no es para hacer una imagen más graciosa o una animación.

Luego, con filter también, tenemos la función opacity(), que no funciona con backdrop-filter. Lo que hace es aplicar un filtro de opacidad al elemento al que se le aplica la propiedad. filter: opacity(0.3);El valor 0 en la función implica que el elemento es transparente, y 1 que se ve por completo.

No obstante, también tenemos la función invert() que invierte los colores.

También tenemos la función filter: sepia(1), lo pone en color sepia, que es un filtro de instagram

Por último tenemos backdrop-filter: hue-rotate() que actúa como una capa de ajuste y aplica el hue rotate PERO AL FONDO, AL BACKDROP!! A LO QUE ESTÁ DETRÁS. El que recibe los efectos es lo de debajo.

PD: Se pueden aplicar varios filters/ filtros a la vez a un elemento dejando espacios entre las funciones:   /*Aplicar varios filtros a través de separar con espacios*/ 
    filter: blur(10px) sepia(1) contrast(2);

Estos filtros se ejecutan en el orden en el que los pongamos, lo cual es bastante importante.

Según él se usan bastante estas propiedades.

2.TRANSFORM
--------------------

En este apartado veremos las funciones de transformación. Nos permiten escalar, sesgar, rotar y trasladar el elemento.

La primera propiedad es scale. scale cambia la escala del elemento. Si le damos 2 el elemento se agranda:

img{
    scale: 2;
}

Si le das 1 se queda igual y si le das 0 desaparece. Trabaja con una escala de tamaños. Si le ponemos 2 será el doble de grande del original. Esta propiedad antes estaba dentro de otra propiedad que se llama transform.

img{
    transform: scale(2);
}

Es lo mismo que antes. Tenemos también las funciones scaleY() y scaleX() para modificar la escala del elemento a lo ancho (scaleX) o a lo largo (scaleY()). También podemos poner scale: 1 2; Donde el primer valor es el ancho, y el segundo es el largo.

También existe transform: scale3D() que sirve para mover un objeto en 3 dimensiones.

Otras funciones útiles que se utilizan con transform es la función skew(). Es como que mueve los ángulos.

Skew() se trabaja también en deg (grados, degrees). Sesga la imagen NO LA ROTA. También esta skewY() solo lo hace en el ejeY, skewX() lo hace en el eje X

.box{
    margin: auto;
    padding: 50px 50px;
    border: 4px solid #000;
    width: fit-content;
    transform: skew(20deg);
}

Después para rotar imágenes tenemos la siguiente función de transform: transform: rotate(20deg); Rota 20 grados la imagen, en este caso a la derecha. Rotate se puede usar como propiedad de CSS.

El rotate lo podemos usar para hacer un efecto de giro, por ejemplo, cuando pasamos el ratón por encima:

.box:first-child{
    rotate: 0deg;
    transition: rotate 1s;
}

.box:last-child{
    /*Sesga la imagen, NO LA ROTA*/
    transform: skew(20deg);
}

.box:first-child:hover{
    rotate: 360deg;
}

Se haría de esta forma.

Otro valor común para el transform es el translate. transform: translate(30px); Tenemos translateX() que es igual que translate, luego tenemos translateY() que desplaza el elemento tantos pixeles en el eje Y como le digamos. Se pueden introducir valores negativos. Luego, a la función translate le podemos pasar dos valores como parámetro para que haga las traslación en ambos ejes:  transform: translate(80px,200px); ponemos la coma al tratarse de una función.

También se puede hacer sin utilizar transform, utilizando la propiedad translate. translate: 80px 200px. Traslada el elemento 80px en el eje x y 200px en el eje Y.

3. MIN, MAX Y CLAMP
------------------------------

Son funciones de comparación. Los 3 comparan 3 valores y se va quedando con el máximo, el mínimo o con el valor ideal. Son funciones como ya hemos dicho de comparación.

Creamos una cajita con un texto, el cual para centrarlo, le damos a su cajita la siguiente propiedad:

.box{
    height: 200px;
    background-color:#48e;
    display: grid;
    place-content: center;
}

Obviamente es place-content: center.

Una cosa curiosa es que si a una caja que tiene un h1 y un p:
 <div class="box">
        <h1>TITULO</h1>
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Tenetur odio eos ducimus excepturi rem illo maxime! Incidunt autem labore harum sed quidem, recusandae mollitia consequatur et exercitationem cumque maiores error?</p>
    </div>

Si a la caja le damos un font-size en pixeles, por defecto p y h1 tienen un fontsize de 1 y 2 em. Por tanto su Font-size no va a ser el de la caja, va ser proporcional al valor de la caja padre.

Si ponemos esto:
.box{
    background-color:#48e;
    display: grid;
    place-content: center;
    color: #fff;
    width: 600px;
    margin: 120px auto;
    font-size: 40px;
    padding: 0 40px;
}

h1{
    font-size: 2em;
}

Es lo mismo que si no le ponemos un font-size al h1. Si pusiéramos p{ font-size: 1em;} tampoco cambiaría.

La función min lo que hace es: width: min(600px,800px); En este caso compara ambos valores y nos devuelve el más pequeño. Compara ambos valores y devuelve el más pequeño. En este caso 600px.

Entonces para qué sirve min??? Sirve para comparar medidas absolutas con medidas relativas. Por ejemplo:  width: min(600px,100%); Entonces si 600px es menor que el 100% de la pantalla que esté, entonces la caja será de 600px. Si no ocupará el 100%. Esto es muy útil. Además, podemos añadir más valores: min(600px, 100%, 200%)

max hace el efecto opuesto. Sirve para comparar valores y se queda con el más grande entre los valores introducidos como parámetros de la función.


PEEERO, hoy por hoy nadie utiliza ni min ni max porque existe una alternativa mejor clamp(), lo primero que le vas a pasar es la medida que quieres que tenga como mínimo, después le pasamos el valor ideal que queremos que tenga, y después el valor máximo. 

Lo que hace clamp() es, con el siguiente ejemplo: width: clamp(800px, 100%, 1400px); Lo que hace es, que si el valor ideal, en este caso el 100%, es menor que el valor mínimo, entonces se queda con el mínimo 800px. Y si es mayor que 1400px, entonces se queda no con el 100%, sino con los 1400px de pantalla. Es decir, le estamos diciendo que NO VA A MEDIR MENOS DE 800PX, QUE SI PUEDE VA A MEDIR EL 100% DE LA PANTALLA, Y QUE TAMPOCO VA A MEDIR EL 100% SI OCUPA MÁS DE 1400PX, QUE ES EL MÁXIMO.

De esta forma podemos trabajar con cajas flexibles. Sin flexbox, maxwidth…

Es útil para crear tamaños de letra flexibles.

Esta muy bien usarlo para evitar media-queries().

4.VARIABLES
------------------

NADA QUE VER CON EL TEMA: Si damos en HTML Ctrl + Ç nos comenta toda una línea de código, como pasa en C++.

Una variable es un espacio que se almacena en la memoria de nuestro programa que hace referencia a un dato que puede cambiar con el tiempo.

Imagínate que queremos que nuestra web tenga un color principal y un color secundario. Qué podemos hacer? Definir una variable.

Para definir una variable en CSS tenemos que poner dos guiones "--". Por ejemplo, queremos una variable que nos almacene este color rojo para poder usarlo sin buscar y será el color principal de la web:

--color-principal: #f44;

Podemos hacer ahora que la caja tenga un color de fondo del de la variable:


.box{
    --color-principal: #f44;
    background-color:var(--color-principal);
    display: grid;
    place-content: center;
    color: #fff;
    width: 600px;
    margin: 120px auto;
    font-size: clamp(2.4rem, 2.2vw, 4rem);
    padding: 0 40px;
    border: 6px solid #000;
}

Utilizando la función var(): background-color:var(--color-principal);. 

La utilidad de usar variables en vez de usar colores es que después lo podemos cambiar solo cambiando la variable. Esto es realmente útil para mantener nuestro código.

En webs grandes hay propiedades que tienen muchísimos valores repetidos. Imagínate tener que cambiar uno por uno. Imposible. Además, el nombre de las variables tiene que ser claro.

Si queremos cambiar el color cambiar únicamente el VALOR de la VARIABLE. Sencillo porque nosotros ya hemos programado anteriormente.

Otra cosa muy importante que tienen las variables es que funcionan únicamente para la descendencia del elemento sobre el que se crea la variable.

Teniendo el siguiente código de CSS Y HTML:

    <div class="box">
        <h1>TITULO</h1>
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Tenetur odio eos ducimus excepturi rem illo maxime! Incidunt autem labore harum sed quidem, recusandae mollitia consequatur et exercitationem cumque maiores error?</p>
    </div>
    <div class="box">
        <h1>TITULO</h1>
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Tenetur odio eos ducimus excepturi rem illo maxime! Incidunt autem labore harum sed quidem, recusandae mollitia consequatur et exercitationem cumque maiores error?</p>
    </div>
    <p>
        Lorem ipsum dolor sit amet consectetur adipisicing elit. Consectetur voluptate nisi dignissimos quaerat ratione! Ipsum, dolor necessitatibus molestiae magni perspiciatis impedit. Non quos a reprehenderit sapiente facilis facere quasi corrupti?
    </p>

.box{
    --color-principal: #48e;
    display: grid;
    place-content: center;
    color: #fff;
    margin: 120px auto;
    font-size: clamp(2.4rem, 2.2vw, 4rem);
    padding: 0 40px;
    border: 6px solid #000;
}

.box:first-child{
    background-color: var(--color-principal);
}

.box:nth-child(2){
    color: var(--color-principal);
    border: 6px solid var(--color-principal);
}

h1{
    font-size: 2.2em;
    margin-bottom: 0;
}

/*Le damos estilo a los p que es hijo directo del body*/
body > p{
    color: var(--color-principal);
    font-size: 60px;
}


Como el p que es hijo directo de body (body > p) NO ESTÁ DENTRO DE LA CAJA, ENTONCES LA VARIABLE PARA ÉL NO FUNCIONA. Si lo pusiéramos en el body, entonce ahí si que va a funcionar.

Además, PODEMOS REDEFINIR las variables para los distintos elementos. Por ejemplo, queremos que el color principal general de nuestra web sea el #48e, pero para las cajas queremos que sea otro. Podemos redefinir la variable:

body{
    margin: 0;
    font-family: sans-serif;
    padding: 20px;
    --color-principal: #48e;
}

.box{
    --color-principal: #f33;
    display: grid;
    place-content: center;
    color: #fff;
    margin: 120px auto;
    font-size: clamp(2.4rem, 2.2vw, 4rem);
    padding: 0 40px;
    border: 6px solid #000;
}

Entonces las cajas usaran el color f33 y el resto el 48e.

Es útil definir variables para el tamaño principal del texto de nuestro programa, así siempre es el mismo y no tenemos que escribir lo mismo 500 veces.

También es útil para utilizar junto con la función calc() ahora veremos para qué exactamente.

Luego podemos hacer lo siguiente:

@property --color-principal{
    syntax: "<color>";
    inherits: false;
    initial-value: #48e;
}

Crear la propiedad --color-principal, que espera recibir un color. El parámetro que vamos a esperar es un color.

Luego tenemos otros tipos de sintaxis como por ejemplo "<number>" que espera un número.

A la property le podemos dar otro valor, el inherits. El inherits es un booleano (true/false) que sirve para saber si se puede heredar o no (en este caso NO= FALSE).

Y luego le podemos dar un valor inicial a la propiedad.

Esto es útil, es como si fuera una variable global. Si en el ejemplo de antes pusiéramos sintaxis: "<number>" no funcionaria porque el valor inicial es un color lo cual NO es un número. 

Además podemos redefinirla para que en otros casos el color principal sea otro. 

Es una forma de llevar CSS al extremo y es una técnica de Houdinni, que sobre todo se utilizan en JScript.

Esto de @property es lo mismo que hacer:

:root{
  --color-principal:48e;
}

A mi me ha gustado más property, pero es más corto lo de la root. En el root sirve para toda la página.


5. FUNCIÓN CALC()
----------------------------

Es una función que hace cálculos. Permite:
	-sumar 
	-restar 
	-multiplicar 
	-dividir

Por ejemplo width:100% es lo mismo que width: calc(50% + 50%) por ejemplo:

.box{
    margin: 60px auto;
    font-size: clamp(2.4rem, 2.2vw, 4rem);
    padding: 0 30px;
    border: 6px solid #000;
    /*Esto es lo mismo que poner directamente 100%*/
    width: calc(50% + 100px);
}

Esto es muy útil porque, como pasaba con las funciones clamp min max y demás podemos combinar unidades absolutas con unidades relativas. Se le suele dar calc(50% + 100px) o valores un pelin más grandes que 100px.

Es común de usar. También podemos restar. Es útil para, por ejemplo cuando no queremos que una pantalla, aunque la hagamos más pequeña o lo que sea, NO queremos que tenga scroll. Si ponemos esto tiene scroll:

.box{
    font-size: clamp(2.4rem, 2.2vw, 4rem);
    padding: 0 30px;
    border: 6px solid #000;
    /*Esto es lo mismo que poner directamente 100%*/
}

.box:first-child{
    height: 200px;
}

.box:nth-child(2){
    height: 83vh;
}

Entonces está mal calculado. Para calcularlo correctamente podemos usar la función de calc():

.box:nth-child(2){
    height: calc(100vh - 300px);
    overflow: scroll;
}

de forma que calculara el 100vh de la pantalla y le restará 300px para que no sea necesario scroll. El overflow scroll se lo damos para que no haya texto que se salga.

También podemos multiplicar y se múltiplica, combinarlo con variables... Las funciones las podemos combinar con otras funciones y que se reciban como parámetros unas entre otras...

.box:nth-child(2){
    height: calc(100vh - clamp(2.4rem, 2.2vw, 4rem));
    overflow: scroll;
}

Será útil combinar clamp y calc para AJUSTAR TAMAÑOS FUENTE, ESPACIADOS Y MÁRGENES FLUIDOS, PARA ANCHOS Y ALTURAS DE ELEMENTOS, PARA ESPACIADOS INTERNOS EN DISEÑOS DE GRID Y FLEXBOX...

6. Propiedades de Scroll
----------------------------

El dice que le deberíamos dar estilo a las barras del body, pero nosotros le vamos a dar estilo a la barra de scroll que hemos añadido a la .box gracias al overflwo: scroll:

.box{
    font-size: 30px;
    padding: 0 40px;
    border: 6px solid #000;
    width: 50vw;
    height: 100vh;
    overflow: scroll;
}

Creamos dos enlaces para poder subir al principio del texto y bajar hasta el final del texto. 

La primera propiedad que vemos que ya habíamos visto es el scroll-behaviour que es para el comportamiento del scroll. Solamente puede tener dos valores:

	- smooth: Desplazamiento limpio.
	- auto (defecto): desplazamiento directo.

Esto no afecta si nosotros lo movemos de manera manual. Con JS podemos cambiar el desplazamiento del scroll de manera manual para que sea mucho más limpio y no tan directo. SOLO CAMBIA PARA LOS ENLACES.

Otra propiedad para la barra de scroll que le podemos dar es el scrollbar-color. A esta propiedad le tenemos que dar dos colores: el primero será el color de la barra y el segundo que será el color del fondo de la barra por donde se desplazará. Se le llama track al fondo. Le podemos poner blanco, o del color del fondo en general para que solo cambie la barra.

La siguiente propiedad nos va a permitir cambiar el tamaño de la scrollbar. La propiedad susodicha es scrollbar-width que NO funciona con poner un valor en pixeles. Tiene 3 valores: auto(es el valor por defecto), thin (hace la barra significativamente más pequeña), none (desaparece el scroll pero se sigue pudiendo deslizar).

Para la accesibilidad, una normativa general para el scrollbar-color es que los colores CONTRASTEN, es una normativa de accesibilidad. Que contrasten significa que LA BARRA DE SCROLL DEBE SER DISTINGUIBLE PARA CUALQUIER USUARIO PARA QUE LA UTILICE. Por ejemplo, NO poner dos colores azules muy parecidos.

Usar thin NO ES MUY RECOMENDABLE porque puede ser difícil de ver.

Luego tenemos el scroll-snap:

	-scroll-snap-type: Define el comportamiento de desplazamiento y el punto de ajuste. Valores:

		o x/y Mandatory: Imprescindible poner el eje al principio. Ajuste al desplazamiento es obligatorio.
		o x/y proximity: opcional
		o none

	-scroll-snap-align: alineamiento.
	
		o start
		o center
		o end
	-scroll-snap-stop: Considera si un punto de ajuste debe ser considerado como una parada obligatoria en el desplazamiento:
	
		o normal: El comportamiento de ajuste es normal.
		o always: El punto de ajuste se considera una parada obligatoria, incluso si se ha pasado rápidamente por el área.

