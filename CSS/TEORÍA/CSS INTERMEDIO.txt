CSS INTERMEDIO
----------------

1.SELECTORES AVANZADOS
-----------------------
Debemos saber cómo dar estilo a los elementos. Pero la otra parte de css, además de dar estilo, consiste en saber SELECCIONAR aquello que queremos modificar. Hay muchas formas en las que podemos tener problemas a la hora de seleccionar elementos en CSS. Saber seleccionar elementos en momentos específicos, en algunos estados, o elementos hijos, hermanos...

1-DAR ESTILO POR ATRIBUTO

Por ejemplo, seleccionar a una etiqueta que, como atributo tenga el src de una imagen concreta:img[scr="FaviconRM.png"]{
    width: 100%;
}

Si queremos por ejemplo seleccionar todas las que tengan .png como extensión lo podemos hacer poniendo el simbolo del dollar $ justo después del atributo de la siguiente manera:

img[src$=".png"]{
    width: 100%;
}

Si queremos aplicar una propiedad a un atributo que empieza de cierta forma usamos ^ :
img[src^="FaviconRM"]{
    width: 50%;
}

2-SELECTORES DESCENDENTES

Si por ejemplo queremos que una propiedad afecte a todas las etiquetas que estén dentro de una etiqueta concreta. Por ejemplo, que el color de letra rojo a los list ítems <li> sea para aquellos li que forman parte de una unordered list <ul>:

ul li{
    color: #f00;
}

Con esto decimos que li tiene que estar adentro de ul. 

Pero si queremos estilo solamente a los hijos y NO a los nietos (no a todos los elementos que estén dentro). Para ello, tenemos que poner el símbolo >:

ul > li{
    color: #f00;
}

Aunque en ese caso CREO que también afecta a los nietos. Ahí se ha confundido.


3-SELECTOR (DE HERMANO) ADYACENTE

Selecciona el elemento que está a continuación mía. Únicamente seleccionamos al elemento de JUSTO DESPUÉS. Para ello hacemos uso de +:

h1 + p{
    color: #00f;
}


4-SELECTOR DE HERMANOS GENERALES

Si queremos darle estilo a todas las etiquetas que se encuentren después de cierta etiqueta tenemos que usar el símbolo ~ de la siguiente forma:

h1 ~ p{
    color: #00f;
}

Se estilizan los <p> que se encuentren después de la etiqueta h1 en este caso.

5- SELECTOR DE MÚLTIPLES ELEMENTOS

Para estilizar elementos con cierta etiqueta; ya lo hemos visto anteriormente:

h1,p{
    color: #000;
}


2-HERENCIA
------------

Concepto de POO. Algunas propiedades pueden heredarse y otras NO pueden. Eso es la herencia. Si por ejemplo el body tiene la siguiente propiedad:

body{
    color: brown;
}

Todos los elementos sin estilo que se encuentren dentro de la etiqueta body heredarán esa propiedad. En concreto, el color SI se puede heredar.

Sin embargo, hay otras propiedades como puede ser el width que NO se heredan.

div{
    width: 50%;
}

En este caso, no haría efecto a los elementos de dentro del div.

Pero podemos modificar el comportamiento de la herencia en CSS.

Si queremos que un elemento herede una propiedad de su padre podemos hacer lo siguiente con algunas características (usar INHERIT->HEREDA):

h1{
    color: inherit;
}

inherit es el valor por defecto. Pero si h1 tiene un color distinto, usa el color definido en h1 en vez de el del padre que heredaría.

Como widht no es una propiedad heredable podemos hacer que h1 la herede poniéndolo nosotros de la siguiente forma:

h1{
    color: inherit;
    width: inherit;
}

Si por ejemplo tenemos el h1 dentro de un div, y no le hemos puesto width a div, a pesar de que no se lo hayamos definido, seguiría heredando el width predefinido de div.

Si lo que queremos hacer es que h1 NO herede el color por ejemplo, o cualquier otra propiedad, lo que tenemos que hacer es usar initial:

h1{
    /*Si queremos que lo herede ponemos inherit*/
    color: inherit;
    width: inherit;
    /*Si no queremos que lo herede ponemos initial*/
    color: initial;
}

Reestablece el valor al valor por defecto.
Luego tenemos unset que lo que hace es que si el valor por defecto era inherit, lo vuelve a inherit, pero si era otro, lo deja en initial.

Normalmente initial, unset y demás NO se utiliza. Inherit se utiliza por ejemplo en los text-areas o las etiquetas del formulario. Usar la herencia de una manera correcta, como hemos hecho en la carrera.


input, textarea{
    width: 100%;
    /*Para que se adapte a la pantalla usamos lo siguiente*/
    box-sizing: border-box;
    padding: 6px 8px;
    border: 2px solid #555;
    border-radius: 5px;
    box-shadow: 0 0 15px 0 #0001;
    background: transparent;
    color: #eee;
    font-family: inherit;
}

Así definimos la Font-family una sola vez para todos los elementos!

3. CASCADA Y ESPECIFIDAD
-------------------------

CSS significa hojas de estilo en cascada. Es un concepto muy importante.

Podemos concebir la especifidad como la puntuación de un estilo. Si a un elemento le decimos que tiene que ser rojo y después decimos que tiene que ser azul... ¿de qué color va a ser? La especifidad y la cascada se encargan de solucionar estos conflictos que ocurren al sobreescribir propiedades.

La cascada es un concepto que dice que el orden en el que ponemos las propiedades a los elementos SI IMPORTA. 

Si ponemos el cursor encima de la etiqueta aparece la especifidad del selector: Especificidad del selector: (0, 0, 1). Si ponemos a h1 dos colores va a poner el último que pongas:

h1{
    color: #f00;
}

h1{
    color: #00f;
}

Cuando la especifidad es exactamente igual, la propiedad que va a quedar es la última que apliquemos. Ambas tienen especifidad (0,0,1).

¿Qué pasa si un elemento tiene más especifidad? Significa que un elemento es más específico. HTML tiene configurado para que nosotros podamos determinar la especifidad de un elemento.

Si a h1 le asignamos una clase y cambiamos al estilo de esa clase, es más específico la clase que la etiqueta:
<h1 class="titulo">TITULO PRINCIPAL</h1>

.titulo{
    color: #f00;
}

h1{
    color: #00f;
}

A pesar de que h1 va después, como .titulo es más específico, el color será el de .titulo. La especifidad de la clase .titulo es:Especificidad del selector: (0, 1, 0) (10, más específico que 1). El valor que más importa es el primero. La forma de ser más específico todavía es usando el id:
<h1 class="titulo" id="titulo">TITULO PRINCIPAL</h1>
#titulo{
    color: #0f0;
}

.titulo{
    color: #f00;
}

h1{
    color: #00f;
}

A pesar que es el primero que pongo, como el id es más especifico: Especificidad del selector: (1, 0, 0) coge el color que hemos puesto haciendo referencia al id. El primer número es el más importante, el segundo es el siguiente más importante. El último el que menos importa. podemos verlo con el tercero tiene especifidad 100, el segundo 10 y el tercero 1.

Ahora, hay un nivel superior de especifidad al de los ids.
Que es ponerle el estilo en línea:<h1 class="titulo" id="titulo" style="color:violet">TITULO PRINCIPAL</h1>
Al poner el style color, es más especifico que hacerlo en css. Ver la imagen de la cascada de especifidad que he hecho.

Poniendo !important en CSS el resto deja de hacer efecto.

h1{
    color: #00f !important;
}

Sigue las normas generales de especifidad:
.titulo{
    color: #f00 !important;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

h1{
    color: #00f !important;
}

A pesar de que ambos tienen important, como .titulo al ser una clase es más especifico que la etiqueta h1, el color será el de la clase! En este caso rojo.

Si seleccionamos a la clase que está dentro de la etiqueta body:
body .titulo{
    color: #f00 !important;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}
La especifidad es:Especificidad del selector: (0, 1, 1), es más específico que (0,1,0).

4. PSEUDOCLASES
-----------------
