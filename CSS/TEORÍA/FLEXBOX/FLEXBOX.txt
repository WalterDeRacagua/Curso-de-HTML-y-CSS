FLEXBOX
------------
1. INTRODUCCION A FLEXBOX
-------------------------------

Es un modelo de caja, algo así como el BoxModel. Es un tipo de modelo de caja. Flexbox es un modulo de css.

Surgio por la pregunta de qué hacer con los tamaños de las cajas cuando sean dinámicos (que vayan cambiando). ¿Qué pasa en esos casos?

Necesitamos cajas con elementos dentro de las mismas que se adapten a los tamaños. Necesitamos que las cajas sean flexibles y el contenido también.

Para que se ve bien en todos los elementos NO debemos de dar un height fijo

Que dependiendo del tamaño de la página web, los elementos de una caja se redimensionen o adpaten de alguna forma (una caja puede ser un div por ejemplo).

Flexbox es una caja donde vamos a crear este contexto de flexbox. A una caja le damos la propiedad display:flex; El comportamiento flexible lo obtienen los elementos de DENTRO DE LA CAJA, NO LA CAJA. Tendremos que darle propiedades a la caja contenedora y a sus ítems. 

A los flex-items les podemos hacer DE TODO. Darles la vuelta, que estén alineados de forma distinta, cambiar la dirección. Flex box es unidireccional, los elementos que vamos poniendo apuntan a una sola dirección. Nosotros podemos definir esa dirección a la que van apuntando esos elementos. Solo lo podemos mover en el eje x o y. 

Tenemos ROW para ordenar los elementos en fila, podrá considerarse de izquierda a derecha.

Después tenemos ROW-REVERSE, para ordenar los flex-items en fila, pero de izquierda a derecha. (No es correcto decir de derecha a izquierda o viceversa, es mejor decir en dirección contraria)

Después tenemos COLUMN donde la dirección normal es de arriba a debajo (aunque no es correcto decirlo así).

También tenemos COLUMN-REVERSE donde la dirección es la opuesta (de abajo a arriba).

Tenemos dos ejes Y NO LOS VAMOS A LLAMAR EJE X y EJE Y.
Los vamos a llamar MAIN AXIS (X) y CROSS AXIS (Y). 

El cross axis se cruza con el main.  

En el caso de row, el main axis va de izquierda a derecha (row-reverse de derecha a izquierda) y el cross axis se mantiene de arriba a abajo.

En caso de column, el main axis va de arriba a abajo (column-reverse de abajo a arriba) y el cross axis en ambos casos se mantiene de izquierda a derecha.

En estos elementos ya nos podríamos olvidar del margin, margin-auto y demás.

Las propiedades que más se usan son:

	-align-items: (start, center o end) para ajustar en el eje y donde queremos un elemento.

	-justify-content: (start, center o end) ajustar en el eje x.

	-gap: px; Si queremos una división igual entre los elementos del flexbox SIN NECESIDAD DE USAR MÁRGENES.

.flexbox{
    align-items: center;
    justify-content: start;
    gap: 10px;
}

Todo esto y MUCHÍSIMO MÁS PODEMOS HACER.

A la caja contenedora le voy a llamar caja flexible. Y a lo de dentro le decimos flex-items. TIENEN PROPIEDADES DISTINTAS. TIENEN QUE SER HIJOS DIRECTOS.

2. FLEX DIRECTION
-------------------

A la caja padre le debemos dar display flex para que se comporte como una caja flexible y todos sus elementos HIJOS serán flex-items.

Si a la flexbox le ponemos display flex, estos se alinean y si redimensionamos los elementos se van ajustando a la pantalla. Son elementos flexibles. Lo único que NO pueden hacer es crecer. Pero si se pueden encoger.

Después vamos a poder hacer que los elementos se agranden, se achiquen, todo lo vamos a poder definir.

1º: Definir hacia dónde quiero que vayan los elementos. felx-direction: (row, row reverse, column, columna-reverse...). IMPORTANTE FLEX-DIRECTION.

Podemos ver que al ponerle padding a los flex-items NI SE ACHICAN NI SE AGRANDAN. Dejan de ser flexibles. Así que es muchísimo mejor darle height y widht. 

Valor por defecto es row (de flex direction.) Estos elementos están configurados para que, si no le ponemos medidas (a los flex-items), ocupen todo el tamaño de la pantalla por el cross axis. Ocupan todo el eje cruzado a lo ancho, por eso hay que poner widht.

Si queremos cambiar la direccionalidad de cualquier flex-direction tenemos direction con valores rtl (right to left) y ltr.

.flexbox{
    display: flex;
    flex-direction: row;
    direction: rtl;
}

Para lenguajes como el árabe por ejemplo. También sirve para el contenido, que aparece escrito de derecha a izquierda. El texto va al revés también.

Se podría configurar la dirección en el caso de que hagamos una web para una empresa gigante. Podemos poner que el flexbox sea direction ltr y las cajitas de la flex box (sus flex-items) sean rtl de forma que el contenido se lea al revés pero las cajas se muevan de manera normal a lo que nosotros estamos acostumbrados.

Ahora vamos a ver propiedades para que, cuando nosotros redimensionemos un flex--item, este pueda moverse hacia abajo.

3. FLEX WRAP Y FLEX FLOW
---------------------------

Flex wrap te permite cambiar el comportamiento de los flex-items. Flex-wrap es una propiedad que se le da a flexbox, no a los flex-items (hijos).

La propiedad flex-wrap nos permite que, al redimensionar la página, los elementos se vayan colocando hacia abajo. Para ello el valor de la propiedad debe ser flex-wrap: wrap; El valor por defecto es no-wrap. Esto es parecido a cómo se comportaban los elementos en display inline-block.

Vemos que con flew-wrap: wrap, los elementos quedan alineados de una manera extraña (quedan 4 elementos arriba, 2 abajo...); ahora veremos cómo podemos cambiar eso.

Al ponerle al flexbox un height de 100vh al redimensionar la página y hacerla más pequeña se van moviendo los elementos (TODO ESTO SI FLEX-DIRECTION ES COLUMN!!)

Con flex box podemos hacer todo lo que se hace con grid (salvo alguna particularidad), pero lo más importante si se puede. Flexbox es la base más importante, grid es la parte top pero no es lo más importante.

Flex-Flow nos permite resumir la propiedad de flex-direction y la de flex-wrap. Y flex nos permite abreviar tres propiedades: flex-bases, flex-shrink y flex-grow, que los veremos ahora más adelante.

Flex Flow abrevia flex-direction y flex-wrap:
flex-flow: row wrap; Su valor por defecto es row nowrap. Es raro usar flex-flow, pero se está utilizando cada vez más. Lo que normalmente se ahce es modificar la dirección no el wrap (suele estar nowrap).

Otro valor de flex-wrap es wrap-reverse, que es lo mismo pero wrappea al revés.

En la siguiente sección veremos cómo alinear los elementos en la página web.


4. ALINEACIÓN EN LOS EJES (FLEXBOX)
---------------------------------------

Es una sección bastante importante dentro del tema de Flex-box. 

La primera propiedad que vemos es justify-content, esta propiedad habla del eje PRINCIPAL, del MAIN AXIS. Alinea los ítems en el eje principal.

Sus valores son: start (predeterminado), center, end. Además tenemos space-between, pone el primer elemento al principio del eje, el último elemento al final del eje y todos los que estén en medio distribuirán su espacio para estar a la misma distancia. Es una estética más bonita.

space-around deja el mismo espacio entre los elementos.

Para hacer que ABSOLUTAMENTE TODO tenga la misma distancia, hacemos space-evenly.

.flexbox{
    display: flex;
    flex-flow: row wrap;
    margin: 20px;
    border: 2px solid #000;
    justify-content: space-evenly;
}

Para que sea perfecto mejor quitar el margen.

Estas son las formas de alinear los elementos en el EJE PRINCIPAL / MAIN AXIS.

Los reverse (row y column) no cambian la dirección de alineamiento.

.flexbox{
    display: flex;
    flex-flow: row wrap;
    margin: 20px;
    border: 2px solid #000;
    justify-content: start;
    height: 360px;
}

Sin embargo, también podemos alinear los elementos en el eje cruzado (CROSS AXIS). Para ello, hacemos uso de la propiedad align-items. Su propiedad por defecto es stretch, stretch significa que los ítems se estiran para llenar el contenedor. Se estira para llenar el cross axis. 

La diferencia entre start y stretch la podemos ver quitando/poniendo el height en los ítems. También tenemos start, center, end y baseline. Lo que hace baseline es que el TEXTO de los flex-items esté la misma altura, se alinea EL TEXTO. A start no le importa el texto.

También tenemos la propiedad align-content (con los mismos valores de antes). Sirve para alinear a TODOS de una forma concreta. Todos se distribuyen en el centro, start, end…
Como que deja de dividirse en filas o columnas por asi decirlo.

Align item es cuando tenemos una sola linea, si tenemos align content, y hay más de una linea podemos quitar align-item. 

1 linea-> align-items
2 o más-> align-content.

Para centrar UN ÚNICO elemento de Flex-box podemos utilizar en el flex-item margin: auto y no usar align-items/content: center y justify-content: center. Hacemos directamente margin:auto y se centra. SE UTILIZA MUCHÍSIMO.

5. ORDER (FLEX BOX)
----------------------

Order únicamente cambia el orden de los elementos.

Solamente es una propiedad y un valor. Y únicamente cambia el orden de manera visual. En el DOM como tal se mantiene el orden.

El orden en el que se verán depende de 2 factores: el orden en el que están puestos en HTML; y el segundo es a través de la propiedad order. Su valor por defecto es 0. Si ponemos 1 se corre un elemento a la izquierda: Si esta ordenado 1->2->3->4 pasa a ser 2->3->4->1. A cada elemento le podemos poner su posición su orden directamente: 

.flexbox__flex-item{
    background: #a22;
    color: #fff;
    font-size: 40px;
    text-align: center;
    direction: rtl;
    width: 100px;
    font-size: 60px;
    order: 3;
}

/*PARA QUE EL PRIMERO TENGA...*/
.flexbox__flex-item:first-child{
    background: #f77;
    order: 2;
}

.flexbox__flex-item:last-child{
    background: #222;
    order: 1;
} 

Para ello tienen y deben estar muy bien definidos TODOS los elementos del flexbox. IMPORTANTE. Solo cambia el orden visual.

Se pueden dar ordenes negativos.

Ya hemos acabado con las propiedades del Flexbox. Pero ahora vamos a empezar a ver propiedades de los flex ítems. Propiedades que se les dan a los elementos hijos.

6. FLEX GROW, SHRINK AND BASES
--------------------------------

Son propiedades que se les dan a los flex-items. Un flex-item son los HIJOS DIRECTOS de un FLEXBOX.

Estas propiedades nos van a ayudar a ajustar el tamaño de los flex-items dependiendo del tamaño de la pantalla por ejemplo. Para diseños responsivos. 

Empezamos con flex-grow. Por defecto, viene en 0. Lo que dice esta propiedad es, que del espacio disponible, puede ocupar algo. flex-grow 1 le da igual la alineación. Ocupará todo el espacio disponible. Si crece la pantalla también crece el flex-item. Podemos ver el flex-grow como una forma de agarrar los espacios disponibles, partirlos en muchas partes y le que tenga la propiedad flex-grow:1 tendrá una parte de esa parte disponible.

Si algún flex-item tiene flex-grow:2, entonces ocupará el doble que el resto de flex-items que tengan 1 (si fuera 3 sería el triple, 4 cuadruple...)

.flexbox__flex-item{
    background: #a22;
    color: #fff;
    font-size: 40px;
    text-align: center;
    direction: rtl;
    font-size: 60px;
    flex-grow: 1;
}

/*PARA QUE EL PRIMERO TENGA...*/
.flexbox__flex-item:first-child{
    background: #f77;
    flex-grow: 2;
}

.flexbox__flex-item:last-child{
    background: #222;
    flex-grow: 4;
}

De esta forma el first child ocupará el doble que el de en medio, pero la mitad que el último, ya que el last-child ocupa 4 flex-grows, y el primero 2 flex grows. Se reparten el espacio disponible. En función del width de los flex-items, se repartirán más o menos espacio.


El flex-shrink determina la capacidad para encogerse. Si ponemos flex:shrink:0 es que los elementos NO se van a encoger después de alcanzar su tamaño base. Si ponemos 1, todos se encogen de la misma manera. Si queremos que un elemento se encoja más que otro debemos ponerle más flex-shrink. Por ejemplo 2:


.flexbox__flex-item{
    background: #a22;
    color: #fff;
    font-size: 40px;
    text-align: center;
    direction: rtl;
    font-size: 60px;
    width: 200px;
    flex-shrink: 1;
}

/*PARA QUE EL PRIMERO TENGA...*/
.flexbox__flex-item:first-child{
    background: #f77;
    flex-shrink: 2;
}

First child se encogerá más que el resto. Si ponemos 0 NO se encoge.

Flex-bases por defecto viene en automático. Si ponemos flex-basis: 0, el tamaño base va a ser muy bajito. Le podemos poner tamaños en pixeles, y según el significa que es lo máximo que se puede achicar el flex-item antes de encogerse. 

No es lo mismo min-width que flex-basis. La diferencia es que, si tenemos un flex-direction: column; al usar flex-basis es como si usaramos un min-height; mientras que si usaramos flex-direction: row; es como si usaramos un min-width. Esa es la diferencia principal.

ES MUCHO MEJOR ESTABLECER EL FLEX-BASIS.

Según el, lo recomendado es usar un flex-basis:0 y también un min-width de algo.

Hay una propiedad que se encarga de resumir flex.grow (lo que crece), el flex-shrink(lo que se encoje) y el flex-basis (tamaños minimos), que es flex.

Flex: grow shrink basis; en ese orden.

La propiedad flex SI que se suele usar. (Acordarnos de que al padre se le daba flex-flow: (row,col reverse) ((no)wrap))

Además, AL FLEX-BOX LE PODEMOS DAR LA PROPIEDAD GAP: X PX; PARA SEPARAR LOS FLEX-ITEMS ENTRE SI. MUY IMPORTANTE. Es bueno usar GAP.

Ahora vamos a ver align-self, que sirve para alinear un solo flex-item, a un solo hijo, no a todos como hacíamos con align-items o align content.

7. ALIGN SELF
---------------

Si tenemos un align-content (align content era para cuando hay más de una linea de elementos, y align ítems para cuando NO hay más de una línea de elementos) NO FUNCIONA la propiedad de align self. Solo funciona con align-items o sin nada. Sus valores pueden ser: start, end, center, baseline, o stretch (ocupa todo el ancho). La propiedad por defecto de align self es auto.

Todos los elementos se han visto afectados por align-items. Pero nosotros podemos cambiarlo para cada elemento de MANERA INDIVIDUAL a través de align-self.

8. LAYOUT CON FLEXBOX
------------------------

Vamos a ver cómo crear un Layout con FlexBox. Aquí hacemos un poco de trampa, porque NO se puede crear layouts solamente con flexbox.

Un layout es la forma que vamos a tener nosotros de distribuir los elementos, el contenido para que todo quepa en nuestra página.

Aquí hace todo unproyecto. Al poner una imagen vemos que sobra margen, para que no pase esto que es el margin collapse, ponemos a h1 margin 0. Esta bien usar h1 y no una clase porque solo debería haber 1 por página.

Aquí repasa el concepto de text-wrap para que el titulo y el texto queden bonitos.

Para crear diseños responsivos, está mal darle un height o un width a los elementos.

Para que la barra de navegación se quede fija en la pantalla
