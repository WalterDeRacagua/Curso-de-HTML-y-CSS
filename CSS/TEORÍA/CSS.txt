CSS

CSS no existe sin HTML. HTML va a ser la base sobre la que vamos a trabajar. CSS sirve para modificar elementos HTML.

Tenemos 3 formas distintas de enlazar HTML y css:

	1-Estilos en linea. Con el atributo style. Podmeos por ejemplo cambiar el color:
<p style="color: red;">
            Este es un parrafo aleatorio para desarrollar en css. Veremos que haremos
        </p>
Se llama así porque lo podemos hacer todo en una sola línea. Pero con esta opción realizamos 2 malas prácticas:

	- Mezclamos código.
	- No es correcto.
	
	2- Utilizar style NO como atributo, si no como etiqueta.
<body>
        <p >
            Este es un parrafo aleatorio para desarrollar en css. Veremos que haremos
        </p>
        <style>
            p{
                color: red;
            }
            h1{
                color: aqua;
            }
        </style>
    </body>

Aun asi esto NO se recomienda ya que estaría todo en el mismo archivo y se recomienda que esté en archivos distintos.

	3-La mejor, la que todos utilizan. Utilizamos la etiqueta link en el head:
  <head>
        <title>
            Enlazando CSS.
        </title>
        <link rel="stylesheet" href="">
    </head>

Donde rel viene de realtionship y le dice que el archivo que vas a vincular tiene una relación. En este caso stylesheet es una hoja de estilos, luego se vinculará a la hoja de estilos. href es la ruta. NO ES LO MISMO QUE SRC. Entonces creamos un nuevo ficherito que se llame styles.css (o el nombre que sea) y ponemos la misma propiedad que antes:
p{
    color: brown;
}

p porque es para TODOS los párrafos de HTML. Y se le llama SELECTOR.

SELECTORES

Forma que tenemos de seleccionar uno o varios elementos de un HTML. Pero en css para poder modificarlos. 3 formas:

	1- SELECTOR ELEMENTS: Busca el nombre del elemento HTML que se llame así y modificarlo. Podríamos llamar a una etiqueta de una forma distinta y modificarla en css:

HTML

<NUEVOELEMENTO>
            ajajajaja
        
</NUEVOELEMENTO>

css

NUEVOELEMENTO{
    color: cadetblue;
}

PERO LO MEJOR ES NO CREAR NOSOTROS ETIQUETAS JAMÁS, ES UNA PRÁCTICA MALÍSIMA. NO SE HACE.

Para conseguir que una sola palabra de un texto sea la que tenga las propiedades que queramos la podemos encerrar en la etiqueta span-> <span>Harina</span>.
Si solo queremos seleccionar a un li para modificarlo (a uno en concreto y no a todos) podemos hacer uso de clases, la propiedad class="" (en HTML).

Para hacer referencia a todos los elementos de clase correspondiente en css debemos de usar ."nombre_clase". Por ejemplo:

<li class="faltante">Harina</li>

.faltante{
    
}

Ya veremos estrategias para saber cual es el mejor nombre a elegir para una clase.

	2- SELECTOR ID: Se utiliza para seleccionar un elemento concreto en toda la página. Supongamos que queremos seleccionar un único elemento clave. Por ejemplo:

<li id="ingrediente-secreto">
                Jamón Ibérico de la Mauritania ibérica
</li>

Para referirnos a él en el css utilizaremos #. Por ejemplo:

#ingrediente-secreto{
    color: cadetblue;
}

NO ES una buena práctica que dos elementos tengan el mismo id, se podría hacer PERO NO ES UNA BUENA PRÁCTICA.

Incluso tendremos problemas cuando trabajemos con JavaScript.


Ahora veremos las propiedades del texto.

PROPIEDADES DEL TEXTO:

Con estas me refiero a otras además del color que ya la hemos visto.

PD: Para el color, el rojo en un navegador es otro color distinto en otro navegador, por tanto ya veremos cómo trabajar con colores absolutos.

Propiedades:

	-font-family: font-family: sans-serif; también se puede entre comillas simples como ''. También podemos poner varias, de forma que si alguna tipografía no carga podemos poner otras para en el caso de que no cargue intente cargar las otras.

	-font-size: font-size: 16px. 16 pixeles son lo default. Cambia el tamaño de la letra. Veremos también unidades de medida.

	-font-weight: Es la anchura de la tipografía/letra.
Esta tiene también como utilidad poder poner algo en negrita usando font-weight: bold; Es mejor que usar <b></b> en el archivo HTML. Si solamente quisiéramos resaltar una palabra, en vez de <b></b> es mejor usar <strong></strong> porque el navegador lo identifica como algo  muy importante. b no.
Además, para cada tipo de tipografía o font-family el autor ha podido declarar menos Font-weights de las disponibles. Es decir, sans-serif por ejemplo solo tiene definidas la font-weight 700 y 200.700 y  escribir bold es lo mismo, bolder es el siguiente, por ejemplo 900.

	-font-style: ; Nos define el estilo de la fuente. Italic es cursiva, normal es el valor por defecto, oblique también es cursiva pero un poco menos, en algunas tipografías no hay diferencia entre italic oblique. Además podemos definir el grado de inclinación de una letra. Lo normal es usar italic ya que poner normal no es necesario al ser por defecto.

	-text-align: ; Donde se alinea el texto, left right center... igual que en el Word.

	-text-decoration: ; decora el texto. Podemos ponerle un underline, que lo subraya, overline que lo subraya por arriba y line-through que tacha el texto. Por defecto es none.
Para los enlaces a podemos quitarle el subrayado usando
 
a{
    text-decoration: none;
}

Ya haremos para quitarle el subrayado a los enlaces y que cuando pasemos el ratón por encima nos lo subraye para que podamos saber que es un enlace. Con los menús también si pasamos el ratón por una opción que se ponga de color azul por ejemplo.

	-line height: El espaciado entre línea y línea. Si ponemos 1 deja poco espacio, si ponemos 2 deja algo más de espacio... le podemos poner 1.4 (valores decimales)(1.4 es un valor muy común). Sin utilizar pixeles.

	-letter-spacing: Espacio entre las palabras/letras del texto. Lo podemos hacer con pixeles, por ejemplo: letter-spacing: 1px; Esto se suele usar con las etiquetas "button".

	-text-transform: none; valor por defecto es none, pero si queremos que todo el texto sea mayúsculo le damos a uppercase. Minúscula lowercase. Capitalize pone a cada palabra la primera letra en mayúsculas.

	-text-shadow: 0px 0px 4px #f99; Podemos ponerle sombra al texto. #f... es el color. Pero queda como el orto, ya vermos como usarla.


Hay algunos más.

TIPOGRAFÍAS EXTERNAS

Como crear o traer tipografías que no están integradas en nuestro sistema a nuestra hoja de estilos para poder darle forma a nuestra web. Hay dos formas:

	1. fonts.google.com. Supongamos que queremos elegir Montserrat, buscamos la selección que queremos copiamos el código en el head y ponemos en Font-family: Montserrat. (FÁCIL)

	2. Más correcta. Configurar nuestras propias tipografías. Creamos un nuevo archivo que se llame fonts.css para configurar tipografías. Ponemos 

1

@font-face{
	font-family: "Montserrat" (puede ser el nombre que queramos, lo correcto es que sea el mismo que la que descargamos)


}

2

Descargamos en fonts.google.com, lo extraemos y nos debe aparecer una carpeta con tipografías, en este caso, para Montserrat se llama static. Nos llevamos esa carpeta al directorio donde tengamos el font.css. Después en font-face buscamos concretamente la tipografia y añadimos un format y ponemos el formato, en este caso ttf = "truetype":

@font-face {
    font-family: "Montserrat";
    src: url("fonts/Montserrat-Regular.ttf") format("truetype");
}

Además, le decimos que el font-weight es de 400.

@font-face {
    font-family: "Montserrat";
    src: url("fonts/Montserrat-Regular.ttf") format("truetype");
    font-weight:400;
}

Y así con más características. Podríamos definir más sobre la misma cambiando por ejemplo el font-weight u otras propiedades útiles. Luego los cambios también los tenemos que reflejar en styles.css para elegir entre las que hemos creado nosotros. Podemos ponerlas según el font weight buscando light, bold y después ajustar el font weight en el style para que vayamos cambiando de anchuras.


BOX MODEL

Es de los temas más importantes de la iniciación a css. Sobre el box model esta construido todo css. Porque todos son cajas, y tenemos que entender cómo funciona una caja, que tiene 4 propiedades principales. Cuando dominemos esas 4 propiedades principales vamos a poder hacer magia con css. Ahora empieza lo importante. Modelo de caja, como se deberían de poner los elementos de HTML en una pagina web.

Un elemento se considera una caja rectangular. En HTML todo se considera una caja. Y estas cajas se redimensionan, cambian sus tamaños, cómo interactúan entre si. 

Propiedades:

	1- CONTENIDO/CONTENT: Nucleo del BoxModel.
	2- RELLENO/PADDING: espacio entre el contenido y el borde del elemento. Separa más el contenido del borde.
	3- BORDE/ BORDER: Limita tanto al contenido como al relleno.
	4- MARGEN/MARGIN: Espacio que hay fuera de la caja, fuera del borde. Separa los elementos de otras cajas. Pero no forma parte de la propia caja.

En esto se basa CSS, todo son cajas.

Puede ser que al aumentar el margen el contenido se haga más chiquitillo.

1-Contenido tiene width y height
2-Padding tiene padding, pero lo podremos configurar.
3-Border tiene width y height
4-Margin tiene margen simplemente.

Para crear una cajita vacía en HTML usamos la etiqueta <div></div>.

A este div le tendremos que añadir distintas propiedades en Css. Le podemos poner background, width y height. Tienen que estar tanto width como height para que salgan. Por ejemplo:

div{
    background:red;
    width: 200px;
    height: 200px;

}

Width y height sirven para definir el ancho y la altura de cualquier elemento de HTML con css. Podemos usar además porcentajes para poder ajustarlo a cualquier tipo de pantalla.


RELLENO Y MARGEN.

Dos de las cosas que más importan a la hora de trabajar con BoxModel (cajas de HTML y CSS).

Funcionan bastante parecido.

Padding es el espacio que hay entre el contenido y el borde de una caja. Aumenta el tamaño de lo que hay alrededor del contenido pero adentro de los bordes. Si agregamos más padding el contenido va a estar más alejado de los bordes. El contenido se mantiene igual, mide lo mismo. Padding es común siempre. Es MEGA IMPORTANTE.

Lo mejor siempre es trabajar con CLASES class= "" y no con selección de elementos de HTML.

.formulario{
    background: red;
    padding: 10px;
}
.formulario_input{

    padding:10px;
}

. porque eran clases. Se aplica el padding a cada clase. A esto se le llama short hand, porque hemos modificado el padding de arriba, abajo, izquierda y derecha a la misma vez.

Pero podemos ajustar cada cosa de manera individual:

.formulario{
    background: red;
    padding-top: 10px;
    padding-bottom: 10px;
    padding-left: 10px;
    padding-right:10px ;
}

Es lo mismo que poner padding: 10px;

.formulario{
     background: red;
     padding: 20px 0 20px 30 px;
}

Este último lo que hace es que podamos ajustar el padding de arriba, derecha, abajo e izquierda (agujas del reloj) en una sola línea. Con 0 no hace falta poner la unidad de medida.


.formulario{
     background: red;
     padding: 20px 10px;
}

Esto es que padding top y bottom tiene 20 pixeles y left y right 10.

Un elemento puede pertenecer a dos class distintas de esta forma en HTML:

 <input  class ="formulario_input formulario_submit" type="submit"value="Confirmar">

El margen nos ayuda a separar CADA ELEMENTO del resto de elementos del página. MUY IMPORTANTE.

.box{
    background: red;
    height: 50px;
    width: 50px;
    margin: 10px;
}

Los márgenes en el sentido vertical se superponen. Ver foto guardada. Se llama Margin Collapse. Y si tuvieran distintos márgenes el margen grande es el que queda.


.box1{

    background: red;
    height: 150px;
    width: 150px;
    margin-bottom:20px ;
}
.box2{
    background: red;
    height: 150px;
    width: 150px;
    margin-top: 20px;
}

En este caso se queda con margen de 20 no de 40. Ya que se superponen. Si fueran distintos, se quedaría con el más grande. NO SE SUMAN.

 <body>
        <div class="box1">   </div>
        <div class="box2">   </div>
</body>

En este caso body es la caja padre y divs son dos elementos hijos de body y por tanto son elementos hermanos. En estos casos hacemos lo siguiente en la clase padre:

body{
    margin: 0;
    display: flex;
    flex-direction: column;
}

Esto es para que NO se superpongan ambos elementos y SI se sumen las distancias.

Pero lo mejor es utilizar este colapso de márgenes a favor del desarrollo de nuestra página web.

MINI EJERCICIO.
Ver ejercicio de la carta1 en la carpeta de ejercicios.

Es un ejercicio muy básico. Ya aprenderemos a entender a usar mejores colores, imágenes, sombras, unidades de medida...

BORDES/BORDER

Propiedades:

Cambiar el tamaño (BORDER-WIDTH)
Cambiar el estilo (BORDER-STYLE)
Cambiar el color.

También tenemos otra propiedad que nos permite modificar los bordes que son los redondeos.

Redondear las esquinas de un elemento (BORDER-RADIUS)

En el caso de la propiedad border-style siempre que se usa o casi siempre, se suele utilizar border-style: SOLID.

Pero también hay más como dashed (con lineas), double, Groove (el segundo más chulo), dotted (con puntos), hidden (lo desaparece).

La propiedad border-radius se da o en pixeles o porcentualmente.

div{

    border-width: 10px;
    border-color: rgb(71, 255, 172);
    border-style: solid;
    border-radius: 10px;
}

Es distinto usar PORCENTAJES que usar PIXELES, probar las diferencias. Se redondea de maneras distintas. Es normal usar 4px para que tenga un mínimo de bordeado.

La propiedad border remplaza las tres primeras:border-width: 10px; border-color: rgb(71, 255, 172); border-style: solid;.
Se haría de la siguiente forma:

div{

    border: 10px solid blue;

}

En ese orden. Pero el border-radius lo tendríamos que poner en otra línea distinta.

Podemos poner border-top: ; para que únicamente tenga borde arriba. Esta propiedad la utiliza mucho el. Y él estudio la carrera de desarrollo web. También border-left,right… y que cada uno sea distinto:


div{
    border-top: 5px, dashed, midnightblue;
    border-right: 5px solid, gray;
    border-bottom: 5px, dashed, midnightblue;
    border-left: 5px solid, gray;
}

Igual para el border-radius.

order-radius: 10px, 50px; Cambiaría esquina superior izquierda e inferior derecha con 10 px; inferior izquierda y superior derecha 50px. También podemos darle uno a cada uno. Probar todas las posibilidades de este vídeo. El usa mucho border top y border. 

Podríamos personalizar un input de la siguiente manera:

input{

    margin: 5px;
    padding: 6px 9px;
    border: none;
    border-top: 1px dashed black;
    background: gainsboro;
}

BOX SIZING

Propiedad de CSS que normalmente la utilizamos para modificar el modelo de caja predeterminado. Básicamente el modelo de caja es cómo calculan los navegadores el total del tamaño de un elemento (esto incluye padding border content...)

Ver foto con las distintas explicaciones de box sizing.

Para ajustar en concreto el tamaño de la caja podemos hacer uso de la propiedad box-sizing.

.box{
    width: 100px;
    height: 100px;
    background-color: red;
    margin: 10px;
} 

.box-default{
    padding: 25px;
    border: 10px solid black;
}

.box-new{

    box-sizing: border-box;
    padding: 25px;
    border: 10px solid black;

}

En el primer caso NO usamos box-sizing y afecta directamente a cada parte de la caja, pero en el segundo caso solo afecta a la caja. Ver foto.

En la foto vemos que el cuadrado de arriba solo afecta al contenido mientras que el de abajo a la caja. Eso es box-sizing.

Usando border box el contenido se adapta al tamaño de caja que decimos.

Si no ponemos nada se usa el content-box, en el cual ajustamos el tamaño del contenido. 

Box-sizing mucho mejor, border-box.

COLORES

Ahora vamos a aprender a dar color, utilizar RGB hexadecimal, hsl…

hsl tiene menos colores que RGB y que hexadecimal.


RGB tiene 256 tipos de verde, 256 tipos de azul y 256 tipos de rojo. 16.777.216 colores.

RGBA (ALPHA) SE ENCARGA DE MANEJAR LA OPACIADAD (CUANTO ROJO/VERDE/AZUL LE VAMOS A DAR AL COLOR)

Empezamos por RGB. Tenemos que decidir cuánto rojo, cuanto azul y cuanto verde queremos para el color que vamos a formar. Por ejemplo, si queremos solo rojo:rgb(255, 0, 0);
Si quisiéramos un violetita rgb(255, 0, 255) mucho rojo y azul y nada de verde...

Para poder elegir un buen color podemos buscar rgba picker.

Pero su favorito es hexadecimal.

Para cada color tenemos 16 posibilidades 0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f. Utilizamos # y decimos cuanto queremos de rojo, cuanto de verde y cuanto de azul. Para cada color tenemos dos números #000000 un total de 6. También se puede hacer solo con 3 valores, uno para el rojo otro para el verde y otro para el azul.

RGB es más intuitivo, pero ambos son iguales.

.box{

    padding: 50px;
    background:#44e;
    margin: 20px;
    text-align: center;
    color: #0ff;
    border-top: 2px solid #0ff;
    border-top-width: 3px;
    font-family: sans-serif;
    font-weight: bold;

}

Fondos claros -> texto oscuro
Fondos oscuros -> texto claro

Probar con htmlcolorcodes 
