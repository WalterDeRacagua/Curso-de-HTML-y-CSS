CSS

CSS no existe sin HTML. HTML va a ser la base sobre la que vamos a trabajar. CSS sirve para modificar elementos HTML.

Tenemos 3 formas distintas de enlazar HTML y css:

	1-Estilos en linea. Con el atributo style. Podmeos por ejemplo cambiar el color:
<p style="color: red;">
            Este es un parrafo aleatorio para desarrollar en css. Veremos que haremos
        </p>
Se llama así porque lo podemos hacer todo en una sola línea. Pero con esta opción realizamos 2 malas prácticas:

	- Mezclamos código.
	- No es correcto.
	
	2- Utilizar style NO como atributo, si no como etiqueta.
<body>
        <p >
            Este es un parrafo aleatorio para desarrollar en css. Veremos que haremos
        </p>
        <style>
            p{
                color: red;
            }
            h1{
                color: aqua;
            }
        </style>
    </body>

Aun asi esto NO se recomienda ya que estaría todo en el mismo archivo y se recomienda que esté en archivos distintos.

	3-La mejor, la que todos utilizan. Utilizamos la etiqueta link en el head:
  <head>
        <title>
            Enlazando CSS.
        </title>
        <link rel="stylesheet" href="">
    </head>

Donde rel viene de realtionship y le dice que el archivo que vas a vincular tiene una relación. En este caso stylesheet es una hoja de estilos, luego se vinculará a la hoja de estilos. href es la ruta. NO ES LO MISMO QUE SRC. Entonces creamos un nuevo ficherito que se llame styles.css (o el nombre que sea) y ponemos la misma propiedad que antes:
p{
    color: brown;
}

p porque es para TODOS los párrafos de HTML. Y se le llama SELECTOR.

SELECTORES

Forma que tenemos de seleccionar uno o varios elementos de un HTML. Pero en css para poder modificarlos. 3 formas:

	1- SELECTOR ELEMENTS: Busca el nombre del elemento HTML que se llame así y modificarlo. Podríamos llamar a una etiqueta de una forma distinta y modificarla en css:

HTML

<NUEVOELEMENTO>
            ajajajaja
        
</NUEVOELEMENTO>

css

NUEVOELEMENTO{
    color: cadetblue;
}

PERO LO MEJOR ES NO CREAR NOSOTROS ETIQUETAS JAMÁS, ES UNA PRÁCTICA MALÍSIMA. NO SE HACE.

Para conseguir que una sola palabra de un texto sea la que tenga las propiedades que queramos la podemos encerrar en la etiqueta span-> <span>Harina</span>.
Si solo queremos seleccionar a un li para modificarlo (a uno en concreto y no a todos) podemos hacer uso de clases, la propiedad class="" (en HTML).

Para hacer referencia a todos los elementos de clase correspondiente en css debemos de usar ."nombre_clase". Por ejemplo:

<li class="faltante">Harina</li>

.faltante{
    
}

Ya veremos estrategias para saber cual es el mejor nombre a elegir para una clase.

	2- SELECTOR ID: Se utiliza para seleccionar un elemento concreto en toda la página. Supongamos que queremos seleccionar un único elemento clave. Por ejemplo:

<li id="ingrediente-secreto">
                Jamón Ibérico de la Mauritania ibérica
</li>

Para referirnos a él en el css utilizaremos #. Por ejemplo:

#ingrediente-secreto{
    color: cadetblue;
}

NO ES una buena práctica que dos elementos tengan el mismo id, se podría hacer PERO NO ES UNA BUENA PRÁCTICA.

Incluso tendremos problemas cuando trabajemos con JavaScript.


Ahora veremos las propiedades del texto.

PROPIEDADES DEL TEXTO:

Con estas me refiero a otras además del color que ya la hemos visto.

PD: Para el color, el rojo en un navegador es otro color distinto en otro navegador, por tanto ya veremos cómo trabajar con colores absolutos.

Propiedades:

	-font-family: font-family: sans-serif; también se puede entre comillas simples como ''. También podemos poner varias, de forma que si alguna tipografía no carga podemos poner otras para en el caso de que no cargue intente cargar las otras.

	-font-size: font-size: 16px. 16 pixeles son lo default. Cambia el tamaño de la letra. Veremos también unidades de medida.

	-font-weight: Es la anchura de la tipografía/letra.
Esta tiene también como utilidad poder poner algo en negrita usando font-weight: bold; Es mejor que usar <b></b> en el archivo HTML. Si solamente quisiéramos resaltar una palabra, en vez de <b></b> es mejor usar <strong></strong> porque el navegador lo identifica como algo  muy importante. b no.
Además, para cada tipo de tipografía o font-family el autor ha podido declarar menos Font-weights de las disponibles. Es decir, sans-serif por ejemplo solo tiene definidas la font-weight 700 y 200.700 y  escribir bold es lo mismo, bolder es el siguiente, por ejemplo 900.

	-font-style: ; Nos define el estilo de la fuente. Italic es cursiva, normal es el valor por defecto, oblique también es cursiva pero un poco menos, en algunas tipografías no hay diferencia entre italic oblique. Además podemos definir el grado de inclinación de una letra. Lo normal es usar italic ya que poner normal no es necesario al ser por defecto.

	-text-align: ; Donde se alinea el texto, left right center... igual que en el Word.

	-text-decoration: ; decora el texto. Podemos ponerle un underline, que lo subraya, overline que lo subraya por arriba y line-through que tacha el texto. Por defecto es none.
Para los enlaces a podemos quitarle el subrayado usando
 
a{
    text-decoration: none;
}

Ya haremos para quitarle el subrayado a los enlaces y que cuando pasemos el ratón por encima nos lo subraye para que podamos saber que es un enlace. Con los menús también si pasamos el ratón por una opción que se ponga de color azul por ejemplo.

	-line height: El espaciado entre línea y línea. Si ponemos 1 deja poco espacio, si ponemos 2 deja algo más de espacio... le podemos poner 1.4 (valores decimales)(1.4 es un valor muy común). Sin utilizar pixeles.

	-letter-spacing: Espacio entre las palabras/letras del texto. Lo podemos hacer con pixeles, por ejemplo: letter-spacing: 1px; Esto se suele usar con las etiquetas "button".

	-text-transform: none; valor por defecto es none, pero si queremos que todo el texto sea mayúsculo le damos a uppercase. Minúscula lowercase. Capitalize pone a cada palabra la primera letra en mayúsculas.

	-text-shadow: 0px 0px 4px #f99; Podemos ponerle sombra al texto. #f... es el color. Pero queda como el orto, ya vermos como usarla.


Hay algunos más.

TIPOGRAFÍAS EXTERNAS

Como crear o traer tipografías que no están integradas en nuestro sistema a nuestra hoja de estilos para poder darle forma a nuestra web. Hay dos formas:

	1. fonts.google.com. Supongamos que queremos elegir Montserrat, buscamos la selección que queremos copiamos el código en el head y ponemos en Font-family: Montserrat. (FÁCIL)

	2. Más correcta. Configurar nuestras propias tipografías. Creamos un nuevo archivo que se llame fonts.css para configurar tipografías. Ponemos 

1

@font-face{
	font-family: "Montserrat" (puede ser el nombre que queramos, lo correcto es que sea el mismo que la que descargamos)


}

2

Descargamos en fonts.google.com, lo extraemos y nos debe aparecer una carpeta con tipografías, en este caso, para Montserrat se llama static. Nos llevamos esa carpeta al directorio donde tengamos el font.css. Después en font-face buscamos concretamente la tipografia y añadimos un format y ponemos el formato, en este caso ttf = "truetype":

@font-face {
    font-family: "Montserrat";
    src: url("fonts/Montserrat-Regular.ttf") format("truetype");
}

Además, le decimos que el font-weight es de 400.

@font-face {
    font-family: "Montserrat";
    src: url("fonts/Montserrat-Regular.ttf") format("truetype");
    font-weight:400;
}

Y así con más características. Podríamos definir más sobre la misma cambiando por ejemplo el font-weight u otras propiedades útiles. Luego los cambios también los tenemos que reflejar en styles.css para elegir entre las que hemos creado nosotros. Podemos ponerlas según el font weight buscando light, bold y después ajustar el font weight en el style para que vayamos cambiando de anchuras.


BOX MODEL

Es de los temas más importantes de la iniciación a css. Sobre el box model esta construido todo css. Porque todos son cajas, y tenemos que entender cómo funciona una caja, que tiene 4 propiedades principales. Cuando dominemos esas 4 propiedades principales vamos a poder hacer magia con css. Ahora empieza lo importante. Modelo de caja, como se deberían de poner los elementos de HTML en una pagina web.

Un elemento se considera una caja rectangular. En HTML todo se considera una caja. Y estas cajas se redimensionan, cambian sus tamaños, cómo interactúan entre si. 

Propiedades:

	1- CONTENIDO/CONTENT: Nucleo del BoxModel.
	2- RELLENO/PADDING: espacio entre el contenido y el borde del elemento. Separa más el contenido del borde.
	3- BORDE/ BORDER: Limita tanto al contenido como al relleno.
	4- MARGEN/MARGIN: Espacio que hay fuera de la caja, fuera del borde. Separa los elementos de otras cajas. Pero no forma parte de la propia caja.

En esto se basa CSS, todo son cajas.

Puede ser que al aumentar el margen el contenido se haga más chiquitillo.

1-Contenido tiene width y height
2-Padding tiene padding, pero lo podremos configurar.
3-Border tiene width y height
4-Margin tiene margen simplemente.

Para crear una cajita vacía en HTML usamos la etiqueta <div></div>.

A este div le tendremos que añadir distintas propiedades en Css. Le podemos poner background, width y height. Tienen que estar tanto width como height para que salgan. Por ejemplo:

div{
    background:red;
    width: 200px;
    height: 200px;

}

Width y height sirven para definir el ancho y la altura de cualquier elemento de HTML con css. Podemos usar además porcentajes para poder ajustarlo a cualquier tipo de pantalla.


RELLENO Y MARGEN.

Dos de las cosas que más importan a la hora de trabajar con BoxModel (cajas de HTML y CSS).

Funcionan bastante parecido.

Padding es el espacio que hay entre el contenido y el borde de una caja. Aumenta el tamaño de lo que hay alrededor del contenido pero adentro de los bordes. Si agregamos más padding el contenido va a estar más alejado de los bordes. El contenido se mantiene igual, mide lo mismo. Padding es común siempre. Es MEGA IMPORTANTE.

Lo mejor siempre es trabajar con CLASES class= "" y no con selección de elementos de HTML.

.formulario{
    background: red;
    padding: 10px;
}
.formulario_input{

    padding:10px;
}

. porque eran clases. Se aplica el padding a cada clase. A esto se le llama short hand, porque hemos modificado el padding de arriba, abajo, izquierda y derecha a la misma vez.

Pero podemos ajustar cada cosa de manera individual:

.formulario{
    background: red;
    padding-top: 10px;
    padding-bottom: 10px;
    padding-left: 10px;
    padding-right:10px ;
}

Es lo mismo que poner padding: 10px;

.formulario{
     background: red;
     padding: 20px 0 20px 30 px;
}

Este último lo que hace es que podamos ajustar el padding de arriba, derecha, abajo e izquierda (agujas del reloj) en una sola línea. Con 0 no hace falta poner la unidad de medida.


.formulario{
     background: red;
     padding: 20px 10px;
}

Esto es que padding top y bottom tiene 20 pixeles y left y right 10.

Un elemento puede pertenecer a dos class distintas de esta forma en HTML:

 <input  class ="formulario_input formulario_submit" type="submit"value="Confirmar">

El margen nos ayuda a separar CADA ELEMENTO del resto de elementos del página. MUY IMPORTANTE.

.box{
    background: red;
    height: 50px;
    width: 50px;
    margin: 10px;
}

Los márgenes en el sentido vertical se superponen. Ver foto guardada. Se llama Margin Collapse. Y si tuvieran distintos márgenes el margen grande es el que queda.


.box1{

    background: red;
    height: 150px;
    width: 150px;
    margin-bottom:20px ;
}
.box2{
    background: red;
    height: 150px;
    width: 150px;
    margin-top: 20px;
}

En este caso se queda con margen de 20 no de 40. Ya que se superponen. Si fueran distintos, se quedaría con el más grande. NO SE SUMAN.

 <body>
        <div class="box1">   </div>
        <div class="box2">   </div>
</body>

En este caso body es la caja padre y divs son dos elementos hijos de body y por tanto son elementos hermanos. En estos casos hacemos lo siguiente en la clase padre:

body{
    margin: 0;
    display: flex;
    flex-direction: column;
}

Esto es para que NO se superpongan ambos elementos y SI se sumen las distancias.

Pero lo mejor es utilizar este colapso de márgenes a favor del desarrollo de nuestra página web.

MINI EJERCICIO.
Ver ejercicio de la carta1 en la carpeta de ejercicios.

Es un ejercicio muy básico. Ya aprenderemos a entender a usar mejores colores, imágenes, sombras, unidades de medida...

BORDES/BORDER

Propiedades:

Cambiar el tamaño (BORDER-WIDTH)
Cambiar el estilo (BORDER-STYLE)
Cambiar el color.

También tenemos otra propiedad que nos permite modificar los bordes que son los redondeos.

Redondear las esquinas de un elemento (BORDER-RADIUS)

En el caso de la propiedad border-style siempre que se usa o casi siempre, se suele utilizar border-style: SOLID.

Pero también hay más como dashed (con lineas), double, Groove (el segundo más chulo), dotted (con puntos), hidden (lo desaparece).

La propiedad border-radius se da o en pixeles o porcentualmente.

div{

    border-width: 10px;
    border-color: rgb(71, 255, 172);
    border-style: solid;
    border-radius: 10px;
}

Es distinto usar PORCENTAJES que usar PIXELES, probar las diferencias. Se redondea de maneras distintas. Es normal usar 4px para que tenga un mínimo de bordeado.

La propiedad border remplaza las tres primeras:border-width: 10px; border-color: rgb(71, 255, 172); border-style: solid;.
Se haría de la siguiente forma:

div{

    border: 10px solid blue;

}

En ese orden. Pero el border-radius lo tendríamos que poner en otra línea distinta.

Podemos poner border-top: ; para que únicamente tenga borde arriba. Esta propiedad la utiliza mucho el. Y él estudio la carrera de desarrollo web. También border-left,right… y que cada uno sea distinto:


div{
    border-top: 5px, dashed, midnightblue;
    border-right: 5px solid, gray;
    border-bottom: 5px, dashed, midnightblue;
    border-left: 5px solid, gray;
}

Igual para el border-radius.

order-radius: 10px, 50px; Cambiaría esquina superior izquierda e inferior derecha con 10 px; inferior izquierda y superior derecha 50px. También podemos darle uno a cada uno. Probar todas las posibilidades de este vídeo. El usa mucho border top y border. 

Podríamos personalizar un input de la siguiente manera:

input{

    margin: 5px;
    padding: 6px 9px;
    border: none;
    border-top: 1px dashed black;
    background: gainsboro;
}

BOX SIZING

Propiedad de CSS que normalmente la utilizamos para modificar el modelo de caja predeterminado. Básicamente el modelo de caja es cómo calculan los navegadores el total del tamaño de un elemento (esto incluye padding border content...)

Ver foto con las distintas explicaciones de box sizing.

Para ajustar en concreto el tamaño de la caja podemos hacer uso de la propiedad box-sizing.

.box{
    width: 100px;
    height: 100px;
    background-color: red;
    margin: 10px;
} 

.box-default{
    padding: 25px;
    border: 10px solid black;
}

.box-new{

    box-sizing: border-box;
    padding: 25px;
    border: 10px solid black;

}

En el primer caso NO usamos box-sizing y afecta directamente a cada parte de la caja, pero en el segundo caso solo afecta a la caja. Ver foto.

En la foto vemos que el cuadrado de arriba solo afecta al contenido mientras que el de abajo a la caja. Eso es box-sizing.

Usando border box el contenido se adapta al tamaño de caja que decimos.

Si no ponemos nada se usa el content-box, en el cual ajustamos el tamaño del contenido. 

Box-sizing mucho mejor, border-box.

COLORES

Ahora vamos a aprender a dar color, utilizar RGB hexadecimal, hsl…

hsl tiene menos colores que RGB y que hexadecimal.


RGB tiene 256 tipos de verde, 256 tipos de azul y 256 tipos de rojo. 16.777.216 colores.

RGBA (ALPHA) SE ENCARGA DE MANEJAR LA OPACIADAD (CUANTO ROJO/VERDE/AZUL LE VAMOS A DAR AL COLOR)

Empezamos por RGB. Tenemos que decidir cuánto rojo, cuanto azul y cuanto verde queremos para el color que vamos a formar. Por ejemplo, si queremos solo rojo:rgb(255, 0, 0);
Si quisiéramos un violetita rgb(255, 0, 255) mucho rojo y azul y nada de verde...

Para poder elegir un buen color podemos buscar rgba picker.

Pero su favorito es hexadecimal.

Para cada color tenemos 16 posibilidades 0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f. Utilizamos # y decimos cuanto queremos de rojo, cuanto de verde y cuanto de azul. Para cada color tenemos dos números #000000 un total de 6. También se puede hacer solo con 3 valores, uno para el rojo otro para el verde y otro para el azul.

RGB es más intuitivo, pero ambos son iguales.

.box{

    padding: 50px;
    background:#44e;
    margin: 20px;
    text-align: center;
    color: #0ff;
    border-top: 2px solid #0ff;
    border-top-width: 3px;
    font-family: sans-serif;
    font-weight: bold;

}

Fondos claros -> texto oscuro
Fondos oscuros -> texto claro

Probar con htmlcolorcodes 

UNIDADES DE MEDIDA

Forma que tenemos de medir cualquier cosa. Puede ser pixeles, porcentajes,rems,em...
Es un error usar para todo los pixeles.

La medida más basica de todas son los pixeles, es una medida absoluta, son aeas de luz de la pantalla. Se usa para el tamaño de imagenes, margeny padding.

Pero también existen otro tipo de unidades e medida que son pt y picas, que se usan para cosas que queremos imprimir.

h1{
    margin: 0;
    font-size: 18pt; /*pc en el caso de las picas*/
}

esto ni nos interesa. No se usan para absolutamente nada.

Otra que si se usan un poco más son los milímetros los centímetros y las pulgadas.

div{
    background: #aeadaddf;
    padding: 4cm;
    font-family: sans-serif;
    border-left: 2px solid #686768;
}

Importante también para imprimir. Para medidas que después en la vida real tienen un significado.

También podemos poner mm y pulgadas -> in

div{
    background: #aeadaddf;
    padding: 0.2in;
    font-family: sans-serif;
    border-left: 2px solid #686768;
}

IMPORTANTE: Únicamente utilizamos estas unidades de medida cuando sepamos que se van a IMPRIMIR lo que estemos haciendo. Se llaman medidas físicas. Un pixel es diferente en cada pantalla.

También se pueden utilizar los centímetros, milímetros y las pulgadas cuando desarrollemos webs táctiles.

Utilizar medidas absolutas es lo mejor en algunos casos, pero no para el diseño responsive (creo que es el que se adapta a los tipos de pantallas). Y aunque adaptemos a las distintas pantallas nuestros diseños con medidas ABSOLUTA, no se vaa ver bien. Vamos a pasar a unidades RELATIVAS.

Las unidades relativas son unidades que dependen de otra unidad o valor. Son importantísimas para el responsive desing.
La unidad relativa más común y conocida es el porcentaje. Cuando usamos el porcentaje, definimos el tamañ con respecto a su contenedor.

p{
    color: #434343;
    background: #ee0000;
    margin: 0;
    width: 50%;
}

Aquí se adaptará al tamaño de la caja contenedora y ocupara el 50% del ancho que ocupa su caja contenedora. Es decir, los porcentajes definen algo respecto al tamaño contendor. Pero respecto al texto es bastante distinto.

No podemos dar medidas del texto con porcentajes. SI pusiramos porcentajes en el font-size nos haría el porcentaje respecto al font-size de la caja contenedora, no respecto al tamaño de la caja contenedora. 


div{
    background: #aeadaddf;
    padding: 0;
    font-family: sans-serif;
    border-left: 2px solid #686768;
    width: 200px;
    font-size: 400px;
}

h1{
    margin: 0;
    font-size: 40px;
}

La caja contenedora de h1 es div. SI por ejemplo nosotros pusieramosque h1 font-size: 10% lo haría sobre el font-size de su caja contenedora que en este caso es div. Por tanto, en este caso poner 10% y 40px sería lo mismo.

Los porcentajes NO se suelen usar ni en márgenes ni en padding ni en webadas de esas.

Después tenemos dos medidas más: em y rem.

Para el dalto definir los tamaño en em es la mejor forma de hacerlo para muchas cosas.

Un em va a valer lo mismo que un font-ize del elemento padre.
Si hacemos esto:
p{
    color: #434343;
    font-size: 1em;
}

Y su caja contenedora/padre tiene el siguiente font-size:

div{
    background: #aeadaddf;
    padding: 0.2in;
    font-family: sans-serif;
    border-left: 2px solid #686768;
    font-size: 30px;
}

p tendrá el mismo font-size que su caja contenedora. Es decir, aquí tendría 30 pixeles. Si pusiéramos 2em seria el doble 60pixeles. Coge el tamaño del font-size del contenedor padre, y multiplícalo por el valor del em.

l rem hace los mismo que el em. Pero en vez de buscar al ELEMENTO PADRE, busca al ELEMENTO RAÍZ. En este caso, el elemento raíz es <html>:

html{
    font-size: 60px;
}

p{
    color: #434343;
    font-size: 0.5rem;
}

En este caso el font-size será de 30 pixeles.

Por tanto, rem busca en la raíz que es HTML, y em busca en la caja padre, en este aso div. De momento, lo hemos utilizado para el font-size. SI no definimos un Font-size para la raiz los define el propio navegador; el valor por defecto suele ser de 16 pixeles.

Si l elemento padre no tiene definido un font-size, va A BUSCAR AL ELEMENTO MÁS PADRE.

Si por ejemplo la caja padre tenemos a div, y div no tiene un Font-size definido, va a buscar a la caja padre de div, en este ejemplo es body. En este caso ajustaría el em al size de body. Comobody NO tiene definido un font-size, iría al padre de body, en este caso es HTML. Como HTML SI tiene definido un Font-size, ajustaría el tamaño al Font-size de HTML y sería lo mismo hacer em que rem.

Después tenemos las medidas del view-port.

Si queremos por ejemplo que h1 tenga la mitad de alto de lo que tiene toda la ventana entera hacemos

h1{
    margin: 0;
    font-size: 23px;
    background-color: #ff0000;
    height: 50vh;
}

donde vh significa viewport height. Se redimensiona la ventana si la achicamos o la agrandamos al tamaño del viewport. También se puede hacer con el width:

h1{
    margin: 0;
    font-size: 23px;
    background-color: #ff0000;
    height: 80vh;
    width: 50vw;
}

Luego, tenemos otra medida que es vmax y vmin que son el viewport máximo y el viewport mínimo. Hace el máximo entre vh y vw, y se queda con el máximo si es vmax y viceversa con vmin.

Ex y ch no lo vamos a ver de momento.

¿Cuándo usamos cada medida?

Si queremos da tamaño a las tipografías, en y rem son ideales.

Para layouts/capas o armar las dimensiones se usan porcentajes, em, rem o viewport height! esto para diseños responsive. 

Si queremos que algo tenga un tamaño fijo podemos usar pixeles. Por ejemplo con imágenes. Para los bordes se usan pixeles.

FONDOS

No solamente le podemos dar color, si no que también podemos hacer muchas más cosas que en este apartado veremos.

Nosotros para l color del fondo hemos venido utilizando el background, ya que engloba muchas posibilidades y en una de ellas se encuentra el color. Pero podemos usar el backgroun-color. Veremos que otras cosas podemos hacer con los fondos.

body{   
    background-color: #00ff00;
}


.box{
    width: 200px;
    height: 200px;
    margin: 20px;
    background-color: #0006;
    position:absolute;
    top: 0;
}

En el background-color, con el ultimo nuerito podemos controlar la opacidad y que e pueda ver un fondo por ejemplo. En youtube, cuando vamos a subir un video nos sale de fondo nuestro canal como más oscuro y eso es por ese feto. 

Otra propiedad que tenemos con background es background-image:

.box{
    width: 200px;
    height: 200px;
    margin: 20px;
    background-color: #000;
    background-image: url("https://th.bing.com/th/id/OIP.Oyh47xp4Jb6imfmeJkeXxQHaEK?rs=1&pid=ImgDetMain");
}

Importante usar las comillas. Como se puede ver, la imagen NO sale al completo. Podemos hacer que se vea completo al amentar el tamaño de la caja en la que se encuentra. El elemento NO es una imagen, es una caja, pero hemos conseguido que el fondo del elemento, de la caja, sea una imagen.

Vemos que la imagen no se adapta al tamaño del elemento, para eso tenemos la propiedad background-size. Hace que crezca como el tamaño del elemento. Podremos controlar la propiedad para que NO se repita la imagen.

background-size: contain; esta propiedad obliga a que la imagen entre y se muestre una vez entera por lo menos una vez y la puede repetir.

background-size: cover; Sirve para que la imagen se adapte y que NO se repita. Hace que la imagen se adapte a la resolución que tiene que tener.

background-position: center; Nos sirve para que solo aparezca una parte de la imagen. También podemos usar pixeles para ajustar la imagen. Normalmente se usa center, top, bottom, left... 

Si ponemos background-size: contain permitiendo que se reptan las imágenes, lo podemos evitar usando background-repeat: no-repeat y quitarle el color de fondo al elemento para que se vea la imagen bien.

.box{
    width: 400px;
    height: 200px;
    margin: 20px;
    background-color: #00000000;
    background-image: url("https://wallpapercave.com/wp/wc1787509.jpg");
    background-size: contain;
    background-position: center;
    background-repeat: no-repeat;
}

tambien podemos elegir que la imagen se repita en una dirección:.box{
    width: 400px;
    height: 200px;
    margin: 20px;
    background-color: #00000000;
    background-image: url("https://wallpapercave.com/wp/wc1787509.jpg");
    background-size: 40px;
    background-position: center;
    background-repeat: repeat-x;
}
Suele trabajar con cover en background-size y contop en background position.

También tenemos  background-attachment: fixed; que nos permite scrollear y que la imagen se siga viendo bien. Esto se suele utilizar en algunas páginas webs. Este efecto es muy común de utilizar.

Lo que viene por defecto es scroll. 

Claro, pero como con otras propiedades, ir poniendo una por una el color, luego el size, luego la position... de manera independiente es un poco "cansino". Podemos usar lo siguiente:

background: image, position, size, repeat (si lo tuviéramos), attachment, color. Quedaría de esta forma:

   background: url("https://wallpapercave.com/wp/wc1787509.jpg") top / cover fixed #00000000;

MUY IMPORTANTE ACORDARNOS DE USAR LA BARRITA "/" PORQUE SI NO NO APARECERÍA LA IMAGEN!!

GRADIENTES

Color que comienza siendo uno pero que se va transformando a otro. Esta teoría también forma parte de los fondos. Es una especie de transición de colores.

Para darle un gradiente a un fondo que originalmente tiene lo siguiente:

.box{
    width: 400px;
    height: 400px;
    background: #f00;
}

Para añadirle el gradiente, primero debemos comprender que existen distintos gradientes y que los usamos en la propiedad background:
	
	-linear-gradient(x,y) se trata de una función usual de programación que recibe dos parámetros, que son dos colores.
Ejemplo: background: linear-gradient(red, #a0a); 
Este linear-gradient se utiliza sobre todo con un último valor de "transparent".

De esta forma se puede apreciar:body{
    background: black;
}

.box{
    width: 400px;
    height: 400px;
    background: linear-gradient(red, transparent);
    
}

transparent != White, comprobarlo con el fondo negro.

Este es el principal uso de los gradientes, con el transparente. Para permitirnos tener una variación del color que tenemos.

Los gradientes por lo general se utilizan para resaltar el texto.

Si queremos que el efecto se haga de izquierda a derecha usamos to right:
    background: linear-gradient(to right,transparent, #000a);

También le podemos dar más colores.

Luego tenemos el radial-gradient(transparent, #000) que focaliza en vez de arriba o abajo o derecha o izquierda, el centro. Como si fuera una mira de un arma.

Por último, tenemos el conic-gradient, que hace un efecto extraño pero piola.

PERO EL PRINCIPAL QUE SE USA ES EL LINEAR.

SOMBRAS

Son muy importantes en el diseño web porque le aportan realismo a cualquier elemento, incluso tridimensionales, mejoran la legibilidad...

Hay tres 3 tipos de sombras:

	-Sombra que le damos a una caja-> box-shadow.
	-Sombra que le damos al texto-> text-shadow.
	-Sombra que le damos a componentes->drop-shadow.

 box-shadow: 20px 0px 50px 10px #000; donde 
 box-shadow: horizontalmente a la derecha, verticalmente hacia abajo, desenfoque, volumen de la sombra, y el color.
Podemos poner valores negativos para que, en vez de a la derecha, vaya a la izquierda, en vez de arriba, vaya abajo, etc...

A los primeros valores generalmente se le pone 0. El 3 valor es el único que se suele modificar, ya que el cuarto es cuanto se extiende la sombra.

Valores comunes: box-shadow: 0 0 40px 0 #0007;

En cuanto al text-shadow tiene un formato PARECIDO al box-shadow, pero sin el cuarto valor:
 text-shadow:  0 0 100px #0007; 

Con imágenes si le aplicamos un box-shadow a una imagen sin fondo queda asquerosa. Para darle una sombra a una imagen con fondo transparente usamos lo siguiente:

filter: drop-shadow(0 0 15px #000f);

De forma que nos quedaría la imagen perfecta.


img{
    width: 160px;
    filter: drop-shadow(0 0 3px #000f);
}
