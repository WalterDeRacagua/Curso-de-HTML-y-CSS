HTML INTERMEDIO

1.METAETIQUETAS COMENTARIOS E ICONOS
-----------------------------------

HTML es menos denso que CSS. Nosotros hemos visto ya bastante de HTML.

Son tres conceptos muy distintos pero veremos cada uno de ellos detenidamente.

Los comentarios son código que sirve para indicar pequeñas cosas, como ocurre en C++ con // o /**/. Solo lo lee el desarrollador.
En CSS hemos descubierto que también se hace con /**/. Pero... ¿y HTML?
En HTML se hace de la siguiente forma: <!---->
Por ejemplo:  <!--Esto es un comentario, el primer comentario en CSS-->
        <h1>Tiriririri, Mauricio Colmenero.</h1>

Los favicons son los iconitos que aparecen arriba en las pestañas. 
Para hacer uso de un favicon usamos esto justo debajo de head:
 <link rel="icon" href=""...>

Imagen debe de ser pequeñita. Se suele tener una imagen de 32X32 pixeles (o en su defecto de 64X64)

Un ejemplo de Favicon es el siguiente:
       <link rel="icon" href="/HTML/PRACTICA/ICONOS/icono/FaviconRM.png" type="image/png">

El type es MUY RECOMENDABLE ponerlo porque así sabemos de qué tipo es la imagen. Y hace que vaya más rápido.

Ahora vamos a ver los metaetiquetas/metatags (mejor en ingles).
Son etiquetas que tienen la única finalidad que tiene es describir ciertos aspectos de nuestra página web. Ofrece información de nuestra web.
En el HEAD van las metaetiquetas. Quien visita nuestra pagina web NO ve esas metaetiquetas. Pero da información para el CEO creo que se llama. El CEO (o como joraca se escriba), ayuda al posicionamiento de nuestra página en la web, en los motores de búsqueda.

PD: <html lang="es"> indica al navegador EN QUÉ LENGUAJE/IDIOMA está escrita la página web.

Las metaetiquetas que vienen por defecto en el head son las siguientes:

<meta charset="UTF-8">: Le dice la codificación que va a utilizar. Este UTF-8 permite TODOS los caracteres de TODOS los idiomas del mundo. Ahora el navegador lo entiende por defecto. Pero lo ponemos por si acaso, por si hay gente que usa navegadores antiguos.

<meta name="viewport" content="width=device-width, initial-scale=1.0"> name es el nombre de la meta-etiqueta y el contenido donde ponemos lo que queremos decir.
Aquí trabajamos con el VIEWPORT, y decimos que width = al ancho del dispositivo que lee la pagina, esto hace que nuestra pagina esté adaptada a todo tipo de dispositivos: Tablet, móviles, computadoras... El initial scale es para el tema del zoom. Cuando carga la pagina por primera vez entra con zoom del 100%. TODO ESTO ES MUY IMPORTANTE PONERLO. VA A SER CLAVE.

En cuanto a otras meta-etiquetas importantes tenemos la de descripción, que explica de lo que trata la página web.
 <meta name="description" content="Esta pagina web se trata del Real Madrid, el club de mi vida y el que me la alegra.">
La descripción debe ser de unos 100 caracteres a lo sumo (RECUERDA, los caracteres son las letras, NO las palabras)

Otra meta-etiqueta importantísima es  <meta name="keywords" content=""> donde están las palabras clave que también ayudaran a posicionar mejor o peor nuestra página en la búsqueda. Ejemplo con una pagina del Real Madrid:<meta name="keywords" content="Real, real, Madrid, madrid, Real Madrid, real madrid, futbol, fútbol">

Otra meta-etiqueta importante que sirve para saber quien es el autor de la pagina web es:
 <meta name="author" content="Sergio Sánchez Carrasco">

Otra meta-etiqueta importante podría ser    <meta name="robots" content=""> con la cual podemos decir al navegador una serie de cosas sobre nuestra página (a través de content por supuesto):
	-content="nofollow": Para que NO la muestre al hacer la busqueda.
	-content="nosnippet": Para que NO se muestre un fragmento de nuestra pagina en el navegador. Los fragmentos a los que me refiero son aquellos que google muestra de nuestra página sin que el usuario entre.
	-content="noarchive" es para que no se almacene una copia de nuestra web en cache. Esto sirve para que
si el usuario tarda 3s en hacer que toda la página le cargue, lo que hace google es guardar nuestra página para que el usuario cuando vuelva a entrar le tarde menos tiempo en cargar. esto hace que no la guarde en caché. Esta propiedad SIRVE si nuestra página es continuamente cambiante.
	-content="noimageindex" las imagenes no indexan
De todas estas que él ha dicho, no se recomienda usar ninguna SALVO en casos puntuales.

Otra meta-etiqueta que tenemos es el <meta name="title" content="REAL MADRID.">. No se suele usar al tener un titulo pero no está demás

Estos han sido los meta-tags más comunes.

Después tenemos los Open-Gwrap-metatags que sirve para cuando pongamos los enlaces que se muestre un titulo o lo que sea. Los 3 siguientes son importantes:

  <meta name="OG:title" content="Sergiosc">
        <meta name="OG:image" content="">
        <meta name="OG:description" content="">

Otro muy importante es: <meta name="OG:url" content=""> que indica a la URL a la que hay que redireccionar.
Para ver esto usamos el debugger de Facebook. Lo buscamos en el buscador y entramos a la web. También tenemos el postinspector de LinkedIn. SI lo queremos ver para cada red social o web buscamos metatags.io.Desde esta pagina podemos hacer que nos genere los 3 metatags más importantes sin tener nosotros que programarlos, para que se pueda ver en todas las plataformas.


2.TEXT AREAS
---------------

Es un input pero que nos deja escribir más cantidad de texto.

Aquí Dalto recuerda que la etiqueta <div></div> sirve para dividir y ya la veremos más adelante.

También recuerda que para adaptar el contenido al tamaño de la pantalla hacemos lo siguiente en CSS: 

box-sizing: border-box;

Además habla de una nueva propiedad de css que es el max-width para que se redimensione pero hasta cierto punto.
  max-width: 600px;

Para poner el text área necesitamos la siguiente etiqueta:
 <textarea ></textarea>

A este text-area le queremos dar las mismas propiedades de CSS que tiene el input. ¿Copiamos y pegamos? NO. Hacemos lo siguiente:

input, textarea{
    width: 100%;
    /*Para que se adapte a la pantalla usamos lo siguiente*/
    box-sizing: border-box;
    padding: 6px 12px;
    border: 2px solid #555;
    border-radius: 5px;
    box-shadow: 0 0 15px 0 #0001;
    background: transparent;
    color: #eee;
}

Para evitar que se pueda redimensionar podemos poner un min-width del 100%. Pero aun podríamos redimensionar a la derecha y cargarnos el layout de la caja. Para ello añadimos una nueva propiedad que sea resize: vertical; para que solo podamos redimensionar de arriba a abajo. Pero sigue sin convencernos. Vamos a coger el text-area y a modificarlo del manera individual. Nos quedaría tal que así:
input, textarea{
    width: 100%;
    /*Para que se adapte a la pantalla usamos lo siguiente*/
    box-sizing: border-box;
    padding: 6px 12px;
    border: 2px solid #555;
    border-radius: 5px;
    box-shadow: 0 0 15px 0 #0001;
    background: transparent;
    color: #eee;
}


textarea{
    min-width: 100%;
    resize: vertical;
    min-height: 100px;
    max-height: 200px;
    font-family: sans-serif;
}

Además, el text-area le podemos poner un placeholder, pero presenta una tipografía distinta al resto:
 <textarea placeholder="Deja tu mensaje"></textarea> Si queremos que el text-area tenga la misma tipografía la tenemos que poner específicamente en el text-area. Es por eso que vemos que en text-area ponemos Fon-family sans-serif. Si no queremos que el text-area se pueda redimensionar ponemos resize:none;
Se está implementando una nueva propiedad que es el form-sizing: content; para que el text-area se adapte al contenido. Será la mejor forma de usarlo.
Luego tenemos una propiedad que es el readonly para que NO se pueda escribir en el text-area y solo salga info que pongamos nosotros: <textarea readonly placeholder="Deja tu mensaje...">FVCK</textarea> readonly es un booleano que NO necesita valor; solamente con ponerlos obtienen el valor de true, en este caso readonly= true; Luego tenemos disabled NO se puede hacer focus, no aparece el bordecito blanco, y no solo eso... Cuando mandemos el formulario, la información dentro del text área NO SE ENVIARÁ A LA BASE DE DATOS. Readonly si. También tenemos maxlength, que es para saber el número total de caracteres que podemos escribir en el text-area. En Twitter hace tiempo por ejemplo lo tenían puesto en 140 caracteres:  <textarea  maxlength="140" placeholder="Deja tu mensaje...">      FVCK</textarea>.
También podemos hacer que, en vez de cambiar el min y maxheight al text área en css, añadir en HTML un propiedad llamada rows= "" para que pueda mostrar el número de líneas que nosotros queramos.

3.LABELS
-----------

Es la manera que tenemos de etiquetar un elemento de input. Es decir, un campo en el cual le pedimos datos del usuario TIENE que estar etiquetado por un label. Mejoran la usabilidad para los ciegos por ejemplo y queda a veces más lindo. Ejemplo:

  <div class="form_input">
            <label >Nombre</label>
            <input type="text" placeholder="Nombre 		    completo">
</div>

Si queremos que haya un espacio entre el label y el input, no se puede hacer poniendo un margin bottom al label. No deja. Para ello podemos hacer 2 cosas:
	
	-Poner a los inputs un margin-top.
	-Poner al label un line-height:2;

Para que el label no sea redundante con el placeholder de cada input, podemos poner como placeholder un ejemplo de cada campo. Podemos cambiar el color del texto que ponemos en cada input, pero ahora a él no le gusta.
Si nosotros queremos que, al pichar en el label nos vaya directamente a su input, tenemos que ponerle un id a cada input y ponerle al label un for "id_element". Por ejemplo: <label for="correo">Email</label>
            <input type="email" placeholder="ejemplo@gmail.com" id="correo">
(Mirar carpeta de PRACTICA/LABELS)

También podemos meter dentro del label el input sin poner el id ni el for y lo hace de manera directa.

Para poder hacer unos términos que el usuario deba aceptar, podemos usar la propiedad checkbox de la etiqueta input. Para que se coloque al lado del label, tenemos que poner width: auto;

4. SELECT, DATALIST Y OPTION
-----------------------------

Son nuevas formas de inputs. Seguimos con los formularios.

Los SELECT son un tipo de campo de entrada que nos permite seleccionar una opción de entre varias opciones. Como una lista que se te despliega con muchas opciones al darle a una flechita.

Los DATALIST donde nosotros escribimos algo y se nos autocompleta con opciones que predefinimos.

El OPTION sirve tanto para el DATALIST como para el SELECT, para poner las distintas opciones a elegir entre las mismas.

Dentro de SELECT ponemos las distintas OPTIONS. Ejemplo:

 <select name="Servicios-para-usuario">
                <option value="serv-1">Merchandising</option>
                <option value="serv-2">Viajes</option>
            </select>
Importante que el SELECT tenga un nombre para saber que tipo de opciones ofrece.
Importante también que el OPTION, cada uno tenga un value para cuando recibimos el código con JavaScript (por ejemplo) saber leer el dato.
Si queremos que el SELECT tenga el mismo formato que el resto de campos, vamos a CSS y se lo ponemos:

input,textarea,select{
    width: 100%;/*Para poner label encima de input*/
    /*Para que se adapte a la pantalla usamos lo siguiente*/
    box-sizing: border-box;
    padding: 6px 8px;
    border: 2px solid #555;
    border-radius: 5px;
    box-shadow: 0 0 15px 0 #0001;
    background: transparent;
    color: #eee;
    margin-top: 5px;
}

Es optimo cambiar el color del background a las distintas opciones para que salga como el resto. Queda así:

       <!--SELECT Y OPTION EN HTML-->
        <div class="form_input">
            <label for="options">Opciones</label>
            <select name="Servicios-para-usuario" id="options">
                <option value="serv-1">Merchandising</option>
                <option value="serv-2">Viajes</option>
            </select>
El DATALIST tiene una función muy parecida al SELECT, pero podemos escribir para acercarnos a la opción que nosotros queramos seleccionar. El modo de uso en HTML es extraño y es de la siguiente forma:
 <!--DATALIST & OPTION-->
        <div class="form_input">
            <label >Tipo de usuario
                <input list="referente" name="referente">
                <datalist id="referente" name="type-of-user">
                    <option value="user-1">Seguidor/a</option>
                    <option value="user-2">Empresa</option>
                    <option value="user-3">Otros</option>
                </datalist>
            </label>
Necesitamos un input con una propiedad list="" en la que pongamos al id de la etiqueta datalist correspondiente. En este caso, si ponemos value="" al seleccionar una opción se autocompleta con el valor "value". Podemos poner el contenido como si fuera el código, el value, y el value ponemos el contenido que queremos que se muestre. O quitar el value. Si lo ponemos de la siguiente forma, sale más bonito:
  <input list="referente" name="referente">
                <datalist id="referente" name="type-of-user">
                    <option value="Seguidor/a"></option>
                    <option value="Empresa"></option>
                    <option value="Otros"></option>
                </datalist>
Podemos poner en el contenido de la OPTION una descripción de la opción. Al servidor se le envía la opción del value también.

5. FIELDSET Y LEGEND
--------------------------

Seguimos con los formularios. Son campos para los formularios. Son más que nada para organizar/agrupar los campos de los formularios. Ejemplo:
 <fieldset>
            <input type="text" placeholder="Nombre">
            <input type="text" placeholder="Apellidos">
            <input type="number" placeholder="Edad">
        </fieldset>
Legend ofrece una descripción de la agrupación. Era como en Java cuando a las tablas las teníamos que poner como un título. Ejemplo:

    <fieldset>
            <legend>INFORMACIÓN DE CONTACTO</legend>
            <input type="email" placeholder="Email">
            <input type="text" placeholder="Teléfono">
        </fieldset>

Hasta aquí hemos llegado a los formularios.

6.DETAILS Y SUMMARY
---------------------

Proporcionan una funcionalidad nativa para poder crear despliegues sin necesidad de JavaScript. Crear contenidos desplegables.
Aquí hemos cometido el error de utilizar el símbolo & en el nombre de la carpeta y no nos dejaba visualizar el contenido.

Un ejemplo de details y summary es:
 <details>
        <summary>A tu mama le encanta</summary>
        Ver mis vídeos.
    </details>

A estos se le puede dar estilo:

body{
    background: #333;
    color: #ddd;
}

details{
    background: transparent;
    border: 1px solid #ddd;
    font-family: sans-serif;
}

details[open]{
    border: 1px solid #ddd;
    font-weight: bold;
}

summary{
    background: transparent;
    border-bottom: 1px solid #ddd;
    padding: 9px;
}

Donde details[open]{
    border: 1px solid #ddd;
    font-weight: bold;
}

implica el estilo que le damos cuando abrimos el summary. En este caso le ponemos un borde abajo, un fondo transparente y aumentamos la anchura del contenido.

Esto es útil para hacer por ejemplo, una sección de preguntas frecuentes (FAQ). O para ocultar o mostrar información adicional también está bien.

De momento no hacer esto:details[open]{
    border: 1px solid #ddd;
    font-weight: bold;
}

Porque no lo hemos visto.

7.ENLACES (AVANZADO)
----------------------

Detrás de los enlaces hay un montón de cosas más que hacer de lo que ya hemos visto en HTML básico.

Para poder poner un enlace a los términos y condiciones de una web, debemos hacer lo siguiente:<label for="terminos">Acepto los <a href="terms.html" target="_blank">terminos y condiciones</a></label>
            <input type="checkbox" id="terminos" class="checkbox">

Pero que pasaría si lo que enlazamos no esta en nuestro equipo y esta en otro lugar? Ahora lo veremos.

Antes de hacer lo anterior vamos a ver los ids, para poder ir a cada apartado de los Términos y condiciones.

Por ejemplo, mis términos tienen en el apartado 5 las modificaciones a los términos. ¿Qué pasa si yo quiero ir directamente a esa sección?

Para eso, tendremos que poner a la parte donde queremos llegar un id para poder ir. Y al enlace de acceso a esa parte, en el href="" poner # y el id. Por ejemplo:

 <a href="#modificaciones-terminos">Modificaciones de terminos</a>
  <h2 id="modificaciones-terminos">

Nos permite decidir a qué elemento vamos a ir.

Si quisiéramos descargar como archivo las condiciones y los términos haremos lo siguiente.

¿Y si queremos enviar al usuario a una web que desconocemos?

 TÉRMINOS Y CONDICIONES GENERADOS EN
            <a href="https://bebita.com">BEBITA.COM</a>

Si lo quisiéramos abrir en target blank, podrían enviarnos a páginas web maliciosas sin tu quererlo. Para evitar eso, tenemos que poner lo siguiente:

rel="noopener"

De forma que quedaría de la siguiente manera:

<a href="https://bebita.com" rel="noopener" target="_blank">BEBITA.COM</a>

Así le quitamos acceso al archivo widnows.opener. FUNDAMENTAL ESTO SI QUEREMOS PONER EL TARGET BLANK.

Pero hay una rel mejor que es:

rel="noreferrer"

No permite el acceso a Windows.opener, pero además tampoco tenga información de los encabezados, de forma que nunca sabrá de qué página vino. No sabrá de donde viene el usuario. MUY IMPORTANTE PONERLO.

rel="nofollow"

Para decirle a Google que no siga a los usuarios ni que tampoco indexe la página del enlace. Por ejemplo los enlaces de los usuarios de Twitter tienen un nofollow. Es imprescindible ponerlo también si los usuarios pueden añadir enlaces (redes sociales). Se puede poner los 3 a la vez:
 <a href="https://bebita.com" rel="noopener noreferrer nofollow" target="_blank">BEBITA.COM</a>

nopenner y noreferrer para todos los enlaces.

Además, podemos añadir un correo de contacto para que el usuario pueda escribir un correo directamente. De esta forma:

<a href="mailto:sesanc15@ucm.es">MANDAR UN MAIL A SERGIO</a>

Este apartado ha servido para dar más seguridad a nuestra página, hacer que se posicione mejor tenga mejor rendimiento...

8.TABLAS
------------

No se usan para muchas cosas A DÍA DE HOY. Es una forma de organizar datos en filas y columnas. Es muy parecido a cómo trabajan las hojas de trabajo de Excel, Word...

Las tablas hace deacadas se usaban para todo. El único uso que se le dan a las tablas a día de hoy es el de mostrar datos tabulares. Cada celda forma parte de una fila y columna y tenemos la necesidad de hacer algo.

La etiqueta para poner tablas es:
<table></table>

Las tablas se separan en una serie de etiquetas. 3 en concreto si no me equivoco. Tenemos:

	- <tr></tr>: Arma una fila para la tabla, tr viene de table row.
	- <td></td>: Arma una columna para nuestra tabla.

Ejemplo:
 <tr>
     <td>
           Membresía nivel 1.
     </td>
     <td>
           Membresía nivel 2.
     </td>
</tr>

Poniendo borde en css a las columnas podemos observar bien tabla.

Además, las tablas necesitan un encabezado para poder saber qué información ponemos en cada columna de la tabla.
Eso se consigue con la etiqueta table header <th> </th>:
     <tr>
            <th>
                Nombre
            </th>
            <th>
                Primer Apellido
            </th>
            <th>
                Segundo Apellido
            </th>
        </tr>

El header aparece centrado y bolder. Hay que hacerlo de esta forma si utilizamos tablas porque así nos ayuda a posicionar la misma. Cada etiqueta tiene su uso y es importante DARLE EL USO CORRECTO.

Podemos poner encabezados NO solo para la primera fila de la tabla, sino que también para un SUBTOTAL DE UNA LISTA DE PRODUCTOS QUE HEMOS COMPRADO, por ejemplo. (Ver código de tablas).

Pero trabajaremos de forma distinta con tablas más tarde, porque podemos querer que la columna de subtotal, el resultado, ocupe todas las columnas y no solo una. Por ejemplo, para resolver eso en nuestra práctica ponemos colspan="2" para que se extienda 2 columnas, la que ya ocupa y una más.

    <table>
        <tr>
            <th>
                Product
            </th>
            <th>
                Cost
            </th>
            <th>
                Units
            </th>
        </tr>
        <tr>
            <td>
                Banana
            </td>
            <td>
                $2
            </td>
            <td>
                10 
            </td>
        </tr>
        <tr>
            <td>
                Apple
            </td>
            <td>
                $2.5
            </td>
            <td>
                14 
            </td>
        </tr>
        <tr>
            <td>
                Watermelon
            </td>
            <td>
                $5
            </td>
            <td>
                1 
            </td>
        </tr>
        <tr>
            <th>
                SUBTOTAL
            </th>
            <td colspan="2">
                $50
            </td>
        </tr>
    </table>

Además, es importante clasificar filas y columnas en thead y tbody. Todas las etiquetas de headers de la tabla formaran parte del thead y se deberán poner dentro, y todo lo que forme parte del contenido deberá ponerse dentro del tbody. MUY IMPORTANTE. Además, el resumen de la tabla lo tenemos que poner en el tfoot, en el caso del ejemplo del subtotal por ejemplo SI deberíamos de ponerlo:
   <tfoot>
                <tr>
                    <th>
                        SUBTOTAL
                    </th>
                    <td colspan="2">
                        $50
                    </td>
                </tr>
            </tfoot>

MUY IMPORTANTE poner todas las etiquetas theader, tbody y tfoot (este último opcional). La estructura será mucho mejor. Border radius para las tablas queda un poco feo.

Para que no haya separación entre las celdas tenemos que ponerle a la tabla un border-spacing de 0:
table{
    width: 100%;
    /*Para que todo pueda aparecer centrado. Y no solo los headers de la tabla*/
    text-align: center;
    padding: 10px 5px;
    border-spacing: 0;
}

También podemos ponerle el boder-spacing que queramos. El le suele poner 12px.

Se suele utilizar para cosas muy concretas. Pero NO tiene tanto uso a día de hoy, antes se usaba para todos.

9.AUDIO Y VÍDEO 
-----------------

La tecnología flash era lo que se utilizaba anteriormente para el audio y para el vídeo. HTML se dio cuenta de que no podía depender de Flash para nada y además flash se volvió insegura.

En HTML 5 se añadieron las etiquetas de video y las de audio. Permiten reproducir vídeo y audios. 

Para poder reproducir un vídeo en una web y que se REPRODUZCA es muy importante poner lo siguiente:
<video autoplay src="video.mp4"></video>
autoplay para que se pueda reproducir automáticamente.
Sin embargo, si únicamente ponemos esto el usuario al refrescar la página NO podrá volver a reproducirlo. Para ello tenemos que añadirle la propiedad CONTROLS:
 <video  controls autoplay src="video.mp4"></video>
Si además queremos que al actualizar la página el vídeo continúe, tenemos que ponerle la propiedad MUTED:
 <video muted controls autoplay src="video.mp4"></video>
Autoplay no funciona sin el muted. El texto que pongamos entre las etiquetas de vídeo es lo que va a aparecer si el navegador NO soporta el vídeo. Ese es el único caso.

En el caso de que no cargue el vídeo el utiliza la etiqueta poster, donde carga una imagen. La imagen que él carga es, por ejemplo, la miniatura del vídeo. <video muted controls autoplay src="video.mp4" poster="">
        Tu navegador NO soporta el vídeo.
    </video>
Y en poster pone la miniatura.
Para audio es lo mismo, cambiamos vídeo por la etiqueta audio y únicamente se reproduciría el audio.

Cuando queramos poner un vídeo, es mejor NO poner la etiqueta audio.

En JavaScript se puede hacer magia con los vídeos. Si queremos que el vídeo se reproduzca en bucle debemos poner loop. y podemos eliminar el control para que el usuario no pueda parar ell vídeo.
    <video muted loop controls autoplay src="video.mp4" poster="">

Para poner subtitulos, podemos utilizar la etiqueta track.
    <video muted loop controls autoplay src="video.mp4" poster="">
        <track src="captions.vtt">
        Tu navegador NO soporta el vídeo.
    </video>
Si queremos que aparezcan directamente los subtitulos, ponemos la propiedad de default. Le tenemos que decir el tipo de track, en este caso subitles y tenemos que poner la propiedad kind="subtitles" y después tenemos que decir el idioma, con srclang= "es" y poner label ="Español (España)" porque hablamos un español de España en nuestro caso:
 <track src="captions.vtt" default kind="subtitles" srclang="es" label="Español (España)"> Pero tenemos que cargar el archivo vtt de los subtitulos. Para configurarlo usamos JavaScript y de otras formas.

10.CARGA DIFERIDA/LAZY LOADING.
---------------------------------